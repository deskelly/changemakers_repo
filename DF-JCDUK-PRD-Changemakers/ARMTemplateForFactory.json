{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DF-JCDUK-PRD-Changemakers"
		},
		"ACastDownloads_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ACastDownloads_GetFiles'"
		},
		"ACastListenersPerEpisode_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ACastListenersPerEpisode_GetFiles'"
		},
		"ACastListeners_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ACastListeners_GetFiles'"
		},
		"Absorb_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Absorb_GetFiles'"
		},
		"AzureSqlDatabase_Changemakers_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase_Changemakers'"
		},
		"ChangeMakersMain_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ChangeMakersMain'"
		},
		"ChangemakerBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ChangemakerBlobStorage'"
		},
		"GA_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'GA_GetFiles'"
		},
		"GA_Snapshot_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'GA_Snapshot_GetFiles'"
		},
		"Get365FilesFromMarketingInsights_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Get365FilesFromMarketingInsights'"
		},
		"GoogleAnalytics_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'GoogleAnalytics_GetFiles'"
		},
		"LinkedinCampaign_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedinCampaign_GetFiles'"
		},
		"LinkedinContentAllPosts_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedinContentAllPosts_GetFiles'"
		},
		"LinkedinContentMetrics_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedinContentMetrics_GetFiles'"
		},
		"LinkedinContent_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedinContent_GetFiles'"
		},
		"LinkedinFollowers_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedinFollowers_GetFiles'"
		},
		"LinkedinVisitors_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedinVisitors_GetFiles'"
		},
		"Twitter_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Twitter_GetFiles'"
		},
		"Umbraco_LikesLogReports_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Umbraco_LikesLogReports_GetFiles'"
		},
		"Umbraco_MediaLogReports_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Umbraco_MediaLogReports_GetFiles'"
		},
		"Vimeo_GetFiles_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Vimeo_GetFiles'"
		},
		"logging_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'logging'"
		},
		"pythonbatch_accessKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accessKey' of 'pythonbatch'"
		},
		"pythonbatch_properties_typeProperties_batchUri": {
			"type": "string",
			"defaultValue": "https://batchchangemakers.uksouth.batch.azure.com"
		},
		"pythonbatch_properties_typeProperties_poolName": {
			"type": "string",
			"defaultValue": "poolcm"
		},
		"pythonbatch_properties_typeProperties_accountName": {
			"type": "string",
			"defaultValue": "batchchangemakers"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Absorb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "Absorb_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Absorb_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "drop table if exists Temp_Raw_Absorb"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Absorb"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Absorb_GetFiles')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]",
				"[concat(variables('factoryId'), '/dataflows/Absorb_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Acast_Downloads')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ACastDownloads_DataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceProcessFiles": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ACastDownloads_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Acast_ListenersPerEpisode')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Script2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ACastListenersPerEpisode_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "ACastListenersPerEpisode",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Coarse"
									}
								}
							]
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "drop table if exists Temp_Raw_ACastListenersPerEpisode"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script2",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "CREATE TABLE Temp_Raw_ACastListenersPerEpisode(\n\tdate date NULL\n\t, listeners int NULL\n\t, episode_name nvarchar(200) NULL\n);"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script3",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "with final_table as (\n  select\n      a.date\n      , a.listeners\n      , replace(replace(substring(a.episode_name, 2, 128), '%20', ' '), '.csv', '') as episode_name\n  from Temp_Raw_ACastListenersPerEpisode a\n)\n-- select * from final_table\nMERGE INTO Raw_ACastListenersPerEpisode a\nUSING final_table b\n    ON a.date = b.date \n    and a.episode_name = b.episode_name\nWHEN MATCHED THEN\n  UPDATE SET \n        a.listeners  = b.listeners \nWHEN NOT MATCHED THEN\n  INSERT (date, listeners, episode_name)\n  VALUES (\n        b.date\n        , b.listeners\n        , b.episode_name \n        );"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script4",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Script3",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "with final_table as (\n    select\n        'Podcast/Vodcast' as channel\n        ,'Acast' as sub_channel\n        , date \n        , date as timestamp\n        , cast(format(date, 'yyyyMM') as int) as month\n        , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\n        , listeners as impression_by_date\n        , listeners as users_by_date\n        , episode_name as activity_calendar_events    --using listerners here until more clarity\n        , date as event_occurence_by_date    --using listerners here until more clarity \n        , date as event_occurence_by_time    --using listerners here until more clarity\n        , 'Russell Gower' as activity_implemented_by\n    from Raw_ACastListenersPerEpisode\n)\n\nMERGE INTO Changemakers_Combined_Overview a\nUSING final_table b\n    on a.channel = b.channel\n    and a.sub_channel = b.sub_channel\n    and a.date = b.date\n    and a.activity_calendar_events = b.activity_calendar_events \nWHEN MATCHED THEN\n  UPDATE SET \n        a.impression_by_date = b.impression_by_date\n        , a.users_by_date = b.users_by_date\n        , a.activity_calendar_events = b.activity_calendar_events\n        , a.event_occurence_by_date = b.event_occurence_by_date\n        , a.event_occurence_by_time = b.event_occurence_by_time\n        , a.activity_implemented_by = b.activity_implemented_by\nWHEN NOT MATCHED THEN\n  INSERT (channel, sub_channel, date, timestamp, month, week, impression_by_date, users_by_date, activity_calendar_events, event_occurence_by_date, event_occurence_by_time, activity_implemented_by)\n  VALUES (\n        b.channel\n        , b.sub_channel\n        , b.date \n        , b.timestamp\n        , b.month\n        , b.week\n        , b.impression_by_date\n        , b.users_by_date\n        , b.activity_calendar_events\n        , b.event_occurence_by_date\n        , b.event_occurence_by_time\n        , b.activity_implemented_by\n        );"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script5",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Script4",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "drop table if exists Temp_Raw_ACastListenersPerEpisode"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"episodeName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ACastListenersPerEpisode_GetFiles')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]",
				"[concat(variables('factoryId'), '/dataflows/ACastListenersPerEpisode')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Acast_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Acast_Downloads",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Acast_ListenersPerEpisode",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Acast_Downloads')]",
				"[concat(variables('factoryId'), '/pipelines/Acast_ListenersPerEpisode')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleAnalytics_Engagment_Overview')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "GA_Engagement_Overview_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addDays(utcNow(), -20)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "GA_Engagement_Overview_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "GoogleAnalytics"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GA_Engagement_Overview_GetFiles')]",
				"[concat(variables('factoryId'), '/dataflows/GA_Engagement_Overview_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleAnalytics_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GoogleAnalytics_Engagment_Overview",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GoogleAnalytics_Snapshot",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "GoogleAnalytics"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/GoogleAnalytics_Engagment_Overview')]",
				"[concat(variables('factoryId'), '/pipelines/GoogleAnalytics_Snapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleAnalytics_Snapshot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "GA_Snapshot_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addDays(utcNow(), -20)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "GA_Snapshot_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "GoogleAnalytics"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GA_Snapshot_GetFiles')]",
				"[concat(variables('factoryId'), '/dataflows/GA_Snapshot_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linkedin_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Linkedin_Paid_Campaign",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Linkedin_Organic_Followers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Linkedin_Organic_Visitors",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline4",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline3",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Linkedin_Organic_ContentAllPosts",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline5",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline4",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Linkedin_Organic_ContentMetrics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Linkedin_Paid_Campaign')]",
				"[concat(variables('factoryId'), '/pipelines/Linkedin_Organic_Followers')]",
				"[concat(variables('factoryId'), '/pipelines/Linkedin_Organic_Visitors')]",
				"[concat(variables('factoryId'), '/pipelines/Linkedin_Organic_ContentAllPosts')]",
				"[concat(variables('factoryId'), '/pipelines/Linkedin_Organic_ContentMetrics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linkedin_Organic_ContentAllPosts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "LinkedinContentAllPosts_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LinkedinContentAllPosts_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinContentAllPosts_GetFiles')]",
				"[concat(variables('factoryId'), '/dataflows/LinkedinContentAllPosts_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linkedin_Organic_ContentMetrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "LinkedinContentMetrics_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LinkedinContentMetrics_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinContentMetrics_GetFiles')]",
				"[concat(variables('factoryId'), '/dataflows/LinkedinContentMetrics_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linkedin_Organic_Followers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "LinkedinFollowers_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LinkedinFollowers_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinFollowers_GetFiles')]",
				"[concat(variables('factoryId'), '/dataflows/LinkedinFollowers_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linkedin_Organic_Visitors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "LinkedinVisitors_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LinkedinVisitors_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinVisitors_GetFiles')]",
				"[concat(variables('factoryId'), '/dataflows/LinkedinVisitors_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linkedin_Paid_Campaign')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "LinkedinCampaign_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Script1",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFolderPath": "campaign",
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": 4
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Start Date (in UTC)",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "date"
													}
												},
												{
													"source": {
														"name": "Impressions",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "impressions"
													}
												},
												{
													"source": {
														"name": "Reactions",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "reactions"
													}
												},
												{
													"source": {
														"name": "Shares",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "shares"
													}
												},
												{
													"source": {
														"name": "Comments",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "comments"
													}
												},
												{
													"source": {
														"name": "Follows",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "follows"
													}
												},
												{
													"source": {
														"name": "Clicks",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "clicks"
													}
												},
												{
													"source": {
														"name": "Click Through Rate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "click_through_rate"
													}
												},
												{
													"source": {
														"name": "Video View Rate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "video_view_rate"
													}
												},
												{
													"source": {
														"name": "Video Views at 25%",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "video_views_25"
													}
												},
												{
													"source": {
														"name": "Video Completions",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "video_completions"
													}
												},
												{
													"source": {
														"name": "Video Completion Rate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "video_completion_rate"
													}
												},
												{
													"source": {
														"name": "Total Spent",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "total_spend"
													}
												},
												{
													"source": {
														"name": "Average CPM",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "average_cpm"
													}
												},
												{
													"source": {
														"name": "Average CPC",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "average_cpc"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "LinkedinCampaign_GetFiles",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "LinkedinCampaign_AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "drop table if exists Temp_Raw_LinkedinCampaign"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Script5",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "LinkedinCampaign_GetFiles",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "logging",
												"type": "LinkedServiceReference"
											}
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Script2",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "delete from Raw_LinkedinCampaign\nwhere date in (select distinct cast(date as date) from Temp_Raw_LinkedinCampaign)"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script3",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "insert into Raw_LinkedinCampaign \n    select \n        cast(date as date) as date\n        , cast(impressions as int) as impressions\n        , cast(reactions as int) as reactions\n        , cast(shares as int) as shares\n        , cast(comments as int) as comments\n        , cast(follows as int) as follows\n        , cast(clicks as int) as clicks\n        , cast(replace(click_through_rate, '%','') as decimal(38,8)) as click_through_rate\n        , isnull(cast(replace(video_view_rate,'%','') as decimal(38,8)),0) as video_view_rate\n        , isnull(cast(video_views_25 as int),0) as video_views_25\n        , isnull(cast(video_completions as int),0) as video_completions\n        , isnull(cast(replace(video_completion_rate,'%','') as decimal(38,8)),0) as video_completion_rate\n        , cast(total_spend as decimal(38,8)) as total_spend\n        , cast(average_cpm as decimal(38,8)) as average_cpm\n        , cast(average_cpc as decimal(38,8)) as average_cpc\n    from Temp_Raw_LinkedinCampaign"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script4",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script3",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "delete from Changemakers_Combined_Overview where sub_channel= 'Linkedin Paid'"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script5",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script4",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "insert into Changemakers_Combined_Overview (channel,sub_channel , date, timestamp,month,week, impression_by_date, users_by_date,event_occurence_by_date,likes_consid_engage_by_date,shares_by_date,comments_by_date,follows_by_date,total_engagements,conversion_total_clicks,click_through_rate,conversion_listened_watched,listened_watched_full_podcast_episode,video_view_rate,video_completion_rate,activity_cost,cost_per_impression_cpm,cost_per_click_cpc)\n    SELECT \n        'Social Media' as 'channel'\n        ,'Linkedin Paid' as 'sub_channel'\n        , date \n        , date as timestamp\n        , cast(format(date, 'yyyyMM') as int) as month\n        , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\n        , impressions as impression_by_date\n        , impressions as users_by_date\n        , date as event_occurence_by_date\n        , reactions as likes_consid_engage_by_date\n        , shares as shares_by_date\n        , comments as comments_by_date\n        , follows as follows_by_date\n        , (reactions + shares + comments + clicks) as total_engagements\n        , clicks as conversion_total_clicks\n        , click_through_rate as click_through_rate\n        , video_views_25 as conversion_listened_watched\n        , video_completions as listened_watched_full_podcast_episode\n        , video_view_rate\n        , video_completion_rate\n        , total_spend as activity_cost\n        , average_cpm as cost_per_impression_cpm\n        , average_cpc as cost_per_click_cpc\n    FROM Raw_LinkedinCampaign"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinCampaign_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/LinkedinCampaign_AzureSqlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]",
				"[concat(variables('factoryId'), '/linkedServices/logging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Twitter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "Twitter_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addDays(utcNow(), -20)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Twitter_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Twitter"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Twitter_GetFiles')]",
				"[concat(variables('factoryId'), '/dataflows/Twitter_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_LikesLogReport')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "Umbraco_LikesLogReports_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "likes",
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Umbraco_LikesLogReports_GetFiles",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Umbraco_LikesLogReports_AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Script2",
									"description": "with raw_data as (\nSELECT \n    cast(ContentId as int) as content_id\n    , ContentName as content_name\n    , cast(cast(DateSubmitted -2e as datetime) as date) as date\n    , cast(DateSubmitted -2e as datetime) as timestamp\n    , cast(Votes as int) as votes\n    , Name as name\n    , Email as email\n  FROM Temp_Raw_Umbraco_LikesReport\n)\n\nMERGE INTO Raw_Umbraco_LikesReport a\nUSING raw_data b\n    ON a.content_id = b.content_id\n    and a.timestamp = b.timestamp \nWHEN MATCHED THEN\n  UPDATE SET a.votes = b.votes\n            , a.content_name = b.content_name\n            , a.email = b.email\n\nWHEN NOT MATCHED THEN\n  INSERT (content_id, content_name,date,timestamp,votes,name,email)\n  VALUES (\n    b.content_id\n    , b.content_name\n    , b.date\n    , b.timestamp\n    , b.votes\n    , b.name\n    , b.email\n        );",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "with raw_data as (\nSELECT \n    cast(ContentId as int) as content_id\n    , ContentName as content_name\n    , cast(cast(DateSubmitted -2e as datetime) as date) as date\n    , cast(DateSubmitted -2e as datetime) as timestamp\n    , cast(Votes as int) as votes\n    , Name as name\n    , Email as email\n  FROM Temp_Raw_Umbraco_LikesReport\n)\n\nMERGE INTO Raw_Umbraco_LikesReport a\nUSING raw_data b\n    ON a.content_id = b.content_id\n    and a.timestamp = b.timestamp \nWHEN MATCHED THEN\n  UPDATE SET a.votes = b.votes\n            , a.content_name = b.content_name\n            , a.email = b.email\n\nWHEN NOT MATCHED THEN\n  INSERT (content_id, content_name,date,timestamp,votes,name,email)\n  VALUES (\n    b.content_id\n    , b.content_name\n    , b.date\n    , b.timestamp\n    , b.votes\n    , b.name\n    , b.email\n        );"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script4",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "with raw_data as (\n    SELECT \n        date\n        , sum(votes) as votes\n    FROM Raw_Umbraco_LikesReport\n    group by date\n)\n--select * from raw_data\nMERGE INTO Changemakers_Combined_Overview a\nUSING raw_data b\n        ON a.channel = 'Website' \n        and a.sub_channel = 'Digital Changemakers Hub'\n        and a.date = b.date\nWHEN MATCHED THEN\n  UPDATE SET a.likes_consid_engage_by_date = b.votes\n\nWHEN NOT MATCHED THEN\n  INSERT (channel,sub_channel,date,timestamp,month,week,likes_consid_engage_by_date)\n  VALUES (\n        'Website'\n        , 'Digital Changemakers Hub'\n        , b.date \n        , b.date\n        , cast(format(b.date, 'yyyyMM') as int)\n        , cast(concat(left(b.date,4),  right(datepart(ww, b.date) + 100, 2)) as int)\n        , b.votes\n        );"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script5",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script4",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "drop table if exists Temp_Raw_Umbraco_LikesReport"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Script5",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Umbraco_LikesLogReports_GetFiles",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "logging",
												"type": "LinkedServiceReference"
											}
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "drop table if exists Temp_Raw_Umbraco_LikesReport"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Umbraco and GA Queries"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Umbraco_LikesLogReports_GetFiles')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]",
				"[concat(variables('factoryId'), '/datasets/Umbraco_LikesLogReports_AzureSqlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/logging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Execute Pipeline2",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "update Changemakers_Combined_Overview\nset total_engagements = isnull(downloads_by_date, 0) + isnull(likes_consid_engage_by_date, 0) \nfrom Changemakers_Combined_Overview\nwhere sub_channel = 'Digital Changemakers Hub'\nand (downloads_by_date is not null or likes_consid_engage_by_date is not null)"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Umbraco_LikesLogReport",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Umbraco_MediaLogReports",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Umbraco and GA Queries"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]",
				"[concat(variables('factoryId'), '/pipelines/Umbraco_LikesLogReport')]",
				"[concat(variables('factoryId'), '/pipelines/Umbraco_MediaLogReports')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_MediaLogReports')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Script1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "Umbraco_MediaLogReports_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "media",
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Url Asset",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "url_asset",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Content Id",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "content_id",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "MemberPlayed",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "member_played",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "DateSubmitted",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "date_submitted",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "MemberKey",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "member_key",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Email",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "email",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Umbraco_MediaLogReports_GetFiles",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Umbraco_MediaLogReports_AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Script2",
									"description": "",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "with raw_data as (\nSELECT \n    url_asset\n    , cast(content_id as int) as content_id\n    , cast(member_played as int) as member_played\n    , cast(cast(date_submitted -2e as datetime) as date) as date\n    , cast(date_submitted -2e as datetime) as timestamp\n    , member_key\n    , email\n  FROM Temp_Raw_Umbraco_MediaReport\n)\n--insert into Raw_Umbraco_MediaReport\n-- select * from raw_data\nMERGE INTO Raw_Umbraco_MediaReport a\nUSING raw_data b\n    ON a.content_id = b.content_id\n    and a.timestamp = b.timestamp \nWHEN MATCHED THEN\n  UPDATE SET \n            a.url_asset = b.url_asset\n            , a.member_played = b.member_played\n            , a.member_key = b.member_key\n            , a.email = b.email\nWHEN NOT MATCHED THEN\n  INSERT (url_asset,content_id,member_played,date,timestamp,member_key,email)\n  VALUES (\n    b.url_asset\n    , b.content_id\n    , b.member_played\n    , b.date\n    , b.timestamp\n    , b.member_key\n    , b.email\n  );"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script4",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script2",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "with raw_data as (\n    SELECT \n        date\n        , sum(member_played) as member_played\n    FROM Raw_Umbraco_MediaReport\n    group by date\n)\n--select * from raw_data\nMERGE INTO Changemakers_Combined_Overview a\nUSING raw_data b\n        ON a.channel = 'Website' \n        and a.sub_channel = 'Digital Changemakers Hub'\n        and a.date = b.date\nWHEN MATCHED THEN\n  UPDATE SET a.downloads_by_date = b.member_played\n\nWHEN NOT MATCHED THEN\n  INSERT (channel,sub_channel,date,timestamp,month,week,downloads_by_date)\n  VALUES (\n        'Website'\n        , 'Digital Changemakers Hub'\n        , b.date \n        , b.date\n        , cast(format(b.date, 'yyyyMM') as int)\n        , cast(concat(left(b.date,4),  right(datepart(ww, b.date) + 100, 2)) as int)\n        , b.member_played\n        );"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script5",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script4",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Changemakers",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "drop table if exists Temp_Raw_Umbraco_MediaReport"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Script5",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Umbraco_MediaLogReports_GetFiles",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "logging",
												"type": "LinkedServiceReference"
											}
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "drop table if exists Temp_Raw_Umbraco_MediaReport"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Umbraco and GA Queries"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Umbraco_MediaLogReports_GetFiles')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]",
				"[concat(variables('factoryId'), '/datasets/Umbraco_MediaLogReports_AzureSqlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/logging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vimeo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "des",
								"value": "dsad"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "Vimeo_GetFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@addDays(utcNow(), -20)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Vimeo_DataFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"SourceProcessFiles": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 16,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Update Digital Changemakers Hub",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Changemakers",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "with ga_vimeo_extract as (\n    select\n        date\n        , sum(finishes) as finishes\n        , sum(plays) as plays\n        , sum(loads) as loads\n    from Raw_Vimeo\n    group by date\n)\n, final_table as (\n    select \n        date\n        , finishes as listened_watched_full_podcast_episode \n        , case when loads > 0 then (plays / loads * 100) else 0 end as video_view_rate\n        , case when plays > 0 then (finishes / plays * 100) else 0 end as video_completion_rate \n    from ga_vimeo_extract\n    where (finishes + plays + loads) > 0\n)\n-- select * from final_table   \n\nMERGE INTO Changemakers_Combined_Overview a\nUSING final_table b\n    ON a.channel = 'Website' \n    and a.sub_channel = 'Digital Changemakers Hub'\n    and a.date = b.date \nWHEN MATCHED THEN\n  UPDATE SET \n        a.listened_watched_full_podcast_episode  = b.listened_watched_full_podcast_episode \n        , a.video_view_rate  = b.video_view_rate \n        , a.video_completion_rate  = b.video_completion_rate \nWHEN NOT MATCHED THEN\n  INSERT (channel,sub_channel,date,timestamp,month,week,listened_watched_full_podcast_episode,video_view_rate,video_completion_rate)\n  VALUES (\n        'Website'\n        , 'Digital Changemakers Hub'\n        , b.date \n        , b.date\n        , cast(format(b.date, 'yyyyMM') as int)\n        , cast(concat(left(b.date,4),  right(datepart(ww, b.date) + 100, 2)) as int)\n        , b.listened_watched_full_podcast_episode\n        , b.video_view_rate\n        , b.video_completion_rate\n        );"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Vimeo"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-23T11:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Vimeo_GetFiles')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]",
				"[concat(variables('factoryId'), '/dataflows/Vimeo_DataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastDownloads_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Raw_ACastDownloads"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastDownloads_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ACastDownloads_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Downloads.csv",
						"container": "acast"
					},
					"columnDelimiter": ";",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Downloads",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ACastDownloads_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastListenersPerEpisode_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_ACastListenersPerEpisode"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastListenersPerEpisode_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ACastListenersPerEpisode_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "acast-listeners-per-episode"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Listeners",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ACastListenersPerEpisode_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastListeners_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Raw_ACastListenersPerEpisode"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastListeners_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ACastListeners_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ACast"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "acast"
					},
					"columnDelimiter": ";",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Listeners",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ACastListeners_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Absorb_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Absorb"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_Absorb"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Absorb_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Absorb_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Absorb"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Data",
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "absorb"
					},
					"range": "",
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Last Name",
						"type": "String"
					},
					{
						"name": "First Name",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					},
					{
						"name": "Date Completed",
						"type": "String"
					},
					{
						"name": "Attained Certificate",
						"type": "String"
					},
					{
						"name": "Certificate Date",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Progress",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Time Spent (min)",
						"type": "String"
					},
					{
						"name": "Date Enrolled",
						"type": "String"
					},
					{
						"name": "Last Logged In",
						"type": "String"
					},
					{
						"name": "Email Address",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Absorb_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GA_Engagement_Overview_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "GoogleAnalytics"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_GA_Engagement_Overview"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GA_Engagement_Overview_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GA_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "GoogleAnalytics"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "overview",
						"container": "googleanalytics"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GA_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GA_Snapshot_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "GoogleAnalytics"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_GA_Snapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GA_Snapshot_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GA_Snapshot_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "GoogleAnalytics"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "snapshot",
						"container": "googleanalytics"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GA_Snapshot_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinCampaign_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_LinkedinCampaign"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinCampaign_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedinCampaign_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "campaign",
						"container": "linkedin"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Start Date (in UTC)",
						"type": "String"
					},
					{
						"name": "Account Name",
						"type": "String"
					},
					{
						"name": "Currency",
						"type": "String"
					},
					{
						"name": "Campaign Group ID",
						"type": "String"
					},
					{
						"name": "Campaign Group Name",
						"type": "String"
					},
					{
						"name": "Campaign Group Status",
						"type": "String"
					},
					{
						"name": "Campaign Group Start Date",
						"type": "String"
					},
					{
						"name": "Campaign Group End Date",
						"type": "String"
					},
					{
						"name": "Campaign Group Total Budget",
						"type": "String"
					},
					{
						"name": "Campaign ID",
						"type": "String"
					},
					{
						"name": "Campaign Name",
						"type": "String"
					},
					{
						"name": "Campaign Objective",
						"type": "String"
					},
					{
						"name": "Campaign Type",
						"type": "String"
					},
					{
						"name": "Campaign Status",
						"type": "String"
					},
					{
						"name": "Cost Type",
						"type": "String"
					},
					{
						"name": "Total Budget",
						"type": "String"
					},
					{
						"name": "Campaign Start Date",
						"type": "String"
					},
					{
						"name": "Campaign End Date",
						"type": "String"
					},
					{
						"name": "Total Spent",
						"type": "String"
					},
					{
						"name": "Impressions",
						"type": "String"
					},
					{
						"name": "Clicks",
						"type": "String"
					},
					{
						"name": "Click Through Rate",
						"type": "String"
					},
					{
						"name": "Average CPM",
						"type": "String"
					},
					{
						"name": "Average CPC",
						"type": "String"
					},
					{
						"name": "Reactions",
						"type": "String"
					},
					{
						"name": "Comments",
						"type": "String"
					},
					{
						"name": "Shares",
						"type": "String"
					},
					{
						"name": "Follows",
						"type": "String"
					},
					{
						"name": "Other Clicks",
						"type": "String"
					},
					{
						"name": "Total Social Actions",
						"type": "String"
					},
					{
						"name": "Total Engagements",
						"type": "String"
					},
					{
						"name": "Engagement Rate",
						"type": "String"
					},
					{
						"name": "Viral Impressions",
						"type": "String"
					},
					{
						"name": "Viral Clicks",
						"type": "String"
					},
					{
						"name": "Viral Reactions",
						"type": "String"
					},
					{
						"name": "Viral Comments",
						"type": "String"
					},
					{
						"name": "Viral Shares",
						"type": "String"
					},
					{
						"name": "Viral Follows",
						"type": "String"
					},
					{
						"name": "Viral Other Clicks",
						"type": "String"
					},
					{
						"name": "Conversions",
						"type": "String"
					},
					{
						"name": "Post-Click Conversions",
						"type": "String"
					},
					{
						"name": "View-Through Conversions",
						"type": "String"
					},
					{
						"name": "Conversion Rate",
						"type": "String"
					},
					{
						"name": "Cost per Conversion",
						"type": "String"
					},
					{
						"name": "Total Conversion Value",
						"type": "String"
					},
					{
						"name": "Return on Ad Spend",
						"type": "String"
					},
					{
						"name": "Viral Conversions",
						"type": "String"
					},
					{
						"name": "Viral Post-Click Conversions",
						"type": "String"
					},
					{
						"name": "Viral View-Through Conversions",
						"type": "String"
					},
					{
						"name": "Leads",
						"type": "String"
					},
					{
						"name": "Lead Forms Opened",
						"type": "String"
					},
					{
						"name": "Lead Form Completion Rate",
						"type": "String"
					},
					{
						"name": "Cost per Lead",
						"type": "String"
					},
					{
						"name": "Video Plays",
						"type": "String"
					},
					{
						"name": "Video Views",
						"type": "String"
					},
					{
						"name": "Video View Rate",
						"type": "String"
					},
					{
						"name": "Video Views at 25%",
						"type": "String"
					},
					{
						"name": "Video Views at 50%",
						"type": "String"
					},
					{
						"name": "Video Views at 75%",
						"type": "String"
					},
					{
						"name": "Video Completions",
						"type": "String"
					},
					{
						"name": "Video Completion Rate",
						"type": "String"
					},
					{
						"name": "Full Screen Plays",
						"type": "String"
					},
					{
						"name": "eCPV",
						"type": "String"
					},
					{
						"name": "Viral Video Plays",
						"type": "String"
					},
					{
						"name": "Viral Video Views",
						"type": "String"
					},
					{
						"name": "Viral Video Views at 25%",
						"type": "String"
					},
					{
						"name": "Viral Video Views at 50%",
						"type": "String"
					},
					{
						"name": "Viral Video Views at 75%",
						"type": "String"
					},
					{
						"name": "Viral Video Completions",
						"type": "String"
					},
					{
						"name": "Viral Video Completion Rate",
						"type": "String"
					},
					{
						"name": "Viral Video Full Screen Plays",
						"type": "String"
					},
					{
						"name": "Event Registrations",
						"type": "String"
					},
					{
						"name": "Click Event Registrations",
						"type": "String"
					},
					{
						"name": "View Event Registrations",
						"type": "String"
					},
					{
						"name": "Viral Event Registrations",
						"type": "String"
					},
					{
						"name": "Viral Click Event Registrations",
						"type": "String"
					},
					{
						"name": "Viral View Event Registrations",
						"type": "String"
					},
					{
						"name": "Average Daily Spend",
						"type": "String"
					},
					{
						"name": "Clicks to Landing Page",
						"type": "String"
					},
					{
						"name": "Clicks to LinkedIn Page",
						"type": "String"
					},
					{
						"name": "Leads (Work Email)",
						"type": "String"
					},
					{
						"name": "Lead Form Completion Rate (Work Email)",
						"type": "String"
					},
					{
						"name": "Cost Per Lead (Work Email)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedinCampaign_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContentAllPosts_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_LinkedinContentAllPosts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContentAllPosts_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedinContentAllPosts_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "All posts",
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "content_allposts",
						"container": "linkedin"
					},
					"range": "A2:T10000",
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Post title",
						"type": "String"
					},
					{
						"name": "Post link",
						"type": "String"
					},
					{
						"name": "Post type",
						"type": "String"
					},
					{
						"name": "Campaign name",
						"type": "String"
					},
					{
						"name": "Posted by",
						"type": "String"
					},
					{
						"name": "Created date",
						"type": "String"
					},
					{
						"name": "Campaign start date",
						"type": "String"
					},
					{
						"name": "Campaign end date",
						"type": "String"
					},
					{
						"name": "Audience",
						"type": "String"
					},
					{
						"name": "Impressions",
						"type": "String"
					},
					{
						"name": "Views (Excluding offsite video views)",
						"type": "String"
					},
					{
						"name": "Offsite Views",
						"type": "String"
					},
					{
						"name": "Clicks",
						"type": "String"
					},
					{
						"name": "Click through rate (CTR)",
						"type": "String"
					},
					{
						"name": "Likes",
						"type": "String"
					},
					{
						"name": "Comments",
						"type": "String"
					},
					{
						"name": "Reposts",
						"type": "String"
					},
					{
						"name": "Follows",
						"type": "String"
					},
					{
						"name": "Engagement rate",
						"type": "String"
					},
					{
						"name": "Content Type",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedinContentAllPosts_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContentMetrics_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_LinkedinContent"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContentMetrics_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedinContentMetrics_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Metrics",
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "content_metrics",
						"container": "linkedin"
					},
					"range": "A2:T10000",
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Impressions (organic)",
						"type": "String"
					},
					{
						"name": "Impressions (sponsored)",
						"type": "String"
					},
					{
						"name": "Impressions (total)",
						"type": "String"
					},
					{
						"name": "Unique impressions (organic)",
						"type": "String"
					},
					{
						"name": "Clicks (organic)",
						"type": "String"
					},
					{
						"name": "Clicks (sponsored)",
						"type": "String"
					},
					{
						"name": "Clicks (total)",
						"type": "String"
					},
					{
						"name": "Reactions (organic)",
						"type": "String"
					},
					{
						"name": "Reactions (sponsored)",
						"type": "String"
					},
					{
						"name": "Reactions (total)",
						"type": "String"
					},
					{
						"name": "Comments (organic)",
						"type": "String"
					},
					{
						"name": "Comments (sponsored)",
						"type": "String"
					},
					{
						"name": "Comments (total)",
						"type": "String"
					},
					{
						"name": "Reposts (organic)",
						"type": "String"
					},
					{
						"name": "Reposts (sponsored)",
						"type": "String"
					},
					{
						"name": "Reposts (total)",
						"type": "String"
					},
					{
						"name": "Engagement rate (organic)",
						"type": "String"
					},
					{
						"name": "Engagement rate (sponsored)",
						"type": "String"
					},
					{
						"name": "Engagement rate (total)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedinContentMetrics_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinFollowers_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_LinkedinFollowers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinFollowers_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedinFollowers_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "New followers",
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "followers",
						"container": "linkedin"
					},
					"range": "",
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Sponsored followers",
						"type": "String"
					},
					{
						"name": "Organic followers",
						"type": "String"
					},
					{
						"name": "Total followers",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedinFollowers_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinVisitors_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_LinkedinVisitors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinVisitors_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedinVisitors_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Linkedin"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Visitor metrics",
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "visitors",
						"container": "linkedin"
					},
					"range": "",
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Overview page views (desktop)",
						"type": "String"
					},
					{
						"name": "Overview page views (mobile)",
						"type": "String"
					},
					{
						"name": "Overview page views (total)",
						"type": "String"
					},
					{
						"name": "Overview unique visitors (desktop)",
						"type": "String"
					},
					{
						"name": "Overview unique visitors (mobile)",
						"type": "String"
					},
					{
						"name": "Overview unique visitors (total)",
						"type": "String"
					},
					{
						"name": "Life page views (desktop)",
						"type": "String"
					},
					{
						"name": "Life page views (mobile)",
						"type": "String"
					},
					{
						"name": "Life page views (total)",
						"type": "String"
					},
					{
						"name": "Life unique visitors (desktop)",
						"type": "String"
					},
					{
						"name": "Life unique visitors (mobile)",
						"type": "String"
					},
					{
						"name": "Life unique visitors (total)",
						"type": "String"
					},
					{
						"name": "Jobs page views (desktop)",
						"type": "String"
					},
					{
						"name": "Jobs page views (mobile)",
						"type": "String"
					},
					{
						"name": "Jobs page views (total)",
						"type": "String"
					},
					{
						"name": "Jobs unique visitors (desktop)",
						"type": "String"
					},
					{
						"name": "Jobs unique visitors (mobile)",
						"type": "String"
					},
					{
						"name": "Jobs unique visitors (total)",
						"type": "String"
					},
					{
						"name": "Total page views (desktop)",
						"type": "String"
					},
					{
						"name": "Total page views (mobile)",
						"type": "String"
					},
					{
						"name": "Total page views (total)",
						"type": "String"
					},
					{
						"name": "Total unique visitors (desktop)",
						"type": "String"
					},
					{
						"name": "Total unique visitors (mobile)",
						"type": "String"
					},
					{
						"name": "Total unique visitors (total)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedinVisitors_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Twitter_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Twitter"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_Twitter"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Twitter_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Twitter_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Twitter"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "twitter"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Tweets published",
						"type": "String"
					},
					{
						"name": "impressions",
						"type": "String"
					},
					{
						"name": "engagements",
						"type": "String"
					},
					{
						"name": "engagement rate",
						"type": "String"
					},
					{
						"name": "retweets",
						"type": "String"
					},
					{
						"name": "replies",
						"type": "String"
					},
					{
						"name": "likes",
						"type": "String"
					},
					{
						"name": "user profile clicks",
						"type": "String"
					},
					{
						"name": "url clicks",
						"type": "String"
					},
					{
						"name": "hashtag clicks",
						"type": "String"
					},
					{
						"name": "detail expands",
						"type": "String"
					},
					{
						"name": "permalink clicks",
						"type": "String"
					},
					{
						"name": "app opens",
						"type": "String"
					},
					{
						"name": "app installs",
						"type": "String"
					},
					{
						"name": "follows",
						"type": "String"
					},
					{
						"name": "email tweet",
						"type": "String"
					},
					{
						"name": "dial phone",
						"type": "String"
					},
					{
						"name": "media views",
						"type": "String"
					},
					{
						"name": "media engagements",
						"type": "String"
					},
					{
						"name": "promoted impressions",
						"type": "String"
					},
					{
						"name": "promoted engagements",
						"type": "String"
					},
					{
						"name": "promoted engagement rate",
						"type": "String"
					},
					{
						"name": "promoted retweets",
						"type": "String"
					},
					{
						"name": "promoted replies",
						"type": "String"
					},
					{
						"name": "promoted likes",
						"type": "String"
					},
					{
						"name": "promoted user profile clicks",
						"type": "String"
					},
					{
						"name": "promoted url clicks",
						"type": "String"
					},
					{
						"name": "promoted hashtag clicks",
						"type": "String"
					},
					{
						"name": "promoted detail expands",
						"type": "String"
					},
					{
						"name": "promoted permalink clicks",
						"type": "String"
					},
					{
						"name": "promoted app opens",
						"type": "String"
					},
					{
						"name": "promoted app installs",
						"type": "String"
					},
					{
						"name": "promoted follows",
						"type": "String"
					},
					{
						"name": "promoted email tweet",
						"type": "String"
					},
					{
						"name": "promoted dial phone",
						"type": "String"
					},
					{
						"name": "promoted media views",
						"type": "String"
					},
					{
						"name": "promoted media engagements",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Twitter_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_LikesLogReports_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Umbraco"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_Umbraco_LikesReport"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_LikesLogReports_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Umbraco_LikesLogReports_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Umbraco"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Like_Content_Full_Details",
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "likes",
						"container": "umbraco"
					},
					"range": "",
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ContentId",
						"type": "String"
					},
					{
						"name": "ContentName",
						"type": "String"
					},
					{
						"name": "DateSubmitted",
						"type": "String"
					},
					{
						"name": "DownVotes",
						"type": "String"
					},
					{
						"name": "Votes",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Umbraco_LikesLogReports_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_MediaLogReports_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Umbraco"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_Umbraco_MediaReport"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_MediaLogReports_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Umbraco_MediaLogReports_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Umbraco"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Media_Content_Full_Details",
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "media",
						"container": "umbraco"
					},
					"range": "",
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Url Asset",
						"type": "String"
					},
					{
						"name": "Content Id",
						"type": "String"
					},
					{
						"name": "MemberPlayed",
						"type": "String"
					},
					{
						"name": "DateSubmitted",
						"type": "String"
					},
					{
						"name": "MemberKey",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Umbraco_MediaLogReports_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vimeo_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vimeo"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Temp_Raw_Vimeo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Changemakers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vimeo_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Vimeo_GetFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Vimeo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "vimeo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "plays",
						"type": "String"
					},
					{
						"name": "loads",
						"type": "String"
					},
					{
						"name": "downloads",
						"type": "String"
					},
					{
						"name": "finishes",
						"type": "String"
					},
					{
						"name": "likes",
						"type": "String"
					},
					{
						"name": "comments",
						"type": "String"
					},
					{
						"name": "uri",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "created_time",
						"type": "String"
					},
					{
						"name": "sizes",
						"type": "String"
					},
					{
						"name": "unique_viewers",
						"type": "String"
					},
					{
						"name": "mean_percent",
						"type": "String"
					},
					{
						"name": "sum_seconds",
						"type": "String"
					},
					{
						"name": "mean_seconds",
						"type": "String"
					},
					{
						"name": "unique_loads",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Vimeo_GetFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastDownloads_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ACastDownloads_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastListenersPerEpisode_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ACastListenersPerEpisode_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastListeners_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ACastListeners_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Absorb_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Absorb_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_Changemakers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_Changemakers_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ChangeMakersMain')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ChangeMakersMain_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ChangemakerBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ChangemakerBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GA_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('GA_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GA_Snapshot_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('GA_Snapshot_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get365FilesFromMarketingInsights')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Get365FilesFromMarketingInsights_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleAnalytics_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('GoogleAnalytics_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinCampaign_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedinCampaign_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContentAllPosts_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedinContentAllPosts_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContentMetrics_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedinContentMetrics_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContent_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedinContent_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinFollowers_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedinFollowers_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinVisitors_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedinVisitors_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Twitter_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Twitter_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_LikesLogReports_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Umbraco_LikesLogReports_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_MediaLogReports_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Umbraco_MediaLogReports_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vimeo_GetFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Vimeo_GetFiles_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/logging')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('logging_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pythonbatch')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBatch",
				"typeProperties": {
					"batchUri": "[parameters('pythonbatch_properties_typeProperties_batchUri')]",
					"poolName": "[parameters('pythonbatch_properties_typeProperties_poolName')]",
					"accountName": "[parameters('pythonbatch_properties_typeProperties_accountName')]",
					"linkedServiceName": {
						"referenceName": "ChangemakerBlobStorage",
						"type": "LinkedServiceReference"
					},
					"accessKey": {
						"type": "SecureString",
						"value": "[parameters('pythonbatch_accessKey')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ChangemakerBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Absorb Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Absorb",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-08T10:24:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Absorb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Acast Main Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Acast_Main",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-08T11:18:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								10
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Acast_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleAnalytics_Main Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "GoogleAnalytics_Main",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-08T11:20:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								20
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/GoogleAnalytics_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linkedin_Main Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Linkedin_Main",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-08T11:21:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								25
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Linkedin_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Twitter Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Twitter",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-08T11:22:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								35
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Twitter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vimeo Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Vimeo",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-08T11:23:00",
						"timeZone": "GMT Standard Time",
						"schedule": {
							"minutes": [
								40
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Vimeo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastDownloads_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ACast"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ACastDownloads_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ACastDownloads_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Date as string,",
						"          Downloads as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     postSQLs:['with final_table as (\\n    select\\n        \\'Podcast/Vodcast\\' as channel\\n        ,\\'Acast\\' as sub_channel\\n        , date \\n        , date as timestamp\\n        , cast(format(date, \\'yyyyMM\\') as int) as month\\n        , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\\n        , downloads as downloads_by_date\\n        , downloads as total_engagements\\n    from Raw_ACastDownloads\\n)\\n-- select * from final_table   \\n\\nMERGE INTO Changemakers_Combined_Overview a\\nUSING final_table b\\n    ON a.channel = b.channel\\n    and a.sub_channel = b.sub_channel\\n    and a.date = b.date \\nWHEN MATCHED THEN\\n  UPDATE SET \\n        a.downloads_by_date  = b.downloads_by_date \\n        , a.total_engagements  = b.total_engagements \\nWHEN NOT MATCHED THEN\\n  INSERT (channel, sub_channel, date, timestamp, month, week, downloads_by_date, total_engagements)\\n  VALUES (\\n        b.channel\\n        ,b.sub_channel\\n        , b.date \\n        , b.timestamp\\n        , b.month\\n        , b.week\\n        , b.downloads_by_date\\n        , b.total_engagements\\n        );'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date = Date,",
						"          downloads = Downloads",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ACastDownloads_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/ACastDownloads_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastListenersPerEpisode')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ACast"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ACastListenersPerEpisode_GetFiles",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ACastListenersPerEpisode_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Date as date,",
						"          Listeners as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true,",
						"     rowUrlColumn: 'episode_name') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date = Date,",
						"          listeners = Listeners,",
						"          episode_name",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ACastListenersPerEpisode_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/ACastListenersPerEpisode_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACastListeners_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ACast"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ACastListeners_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ACastListeners_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Date as string,",
						"          Listeners as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceProcessFiles",
						"SourceProcessFiles derive(Date = toDate(Date, 'yyyy-MM-dd'),",
						"          Listeners = toInteger(Listeners)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date = Date,",
						"          listeners = Listeners",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ACastListeners_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/ACastListeners_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Absorb_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Absorb"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Absorb_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Absorb_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Last Name} as string,",
						"          {First Name} as string,",
						"          Department as string,",
						"          {Date Completed} as string,",
						"          {Attained Certificate} as string,",
						"          {Certificate Date} as string,",
						"          Status as string,",
						"          Progress as string,",
						"          {Job Title} as string,",
						"          {Time Spent (min)} as string,",
						"          {Date Enrolled} as string,",
						"          {Last Logged In} as string,",
						"          {Email Address} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     postSQLs:['truncate table Raw_Absorb','insert into Raw_Absorb\\n    select \\n        last_name\\n        , first_name\\n        , department\\n        , try_convert(datetime, date_completed, 103) as date_completed\\n        , attained_certificate\\n        , certificate_date\\n        , status\\n        , cast(progress as decimal(10,4)) as progress\\n        , job_title\\n        , cast(time_spent_min as int) as time_spent_min\\n        , try_convert(date, date_enrolled, 103) as date_enrolled\\n        , try_convert(datetime, last_logged_in, 103) as last_logged_in\\n        , email_address\\nfrom Temp_Raw_Absorb','delete from Changemakers_Combined_Overview where sub_channel = \\'Absorb\\'','with run_tot as (\\n    select\\n        job_title\\n        , time_spent_min\\n        , date_enrolled\\n    from Raw_Absorb\\n)\\ninsert into Changemakers_Combined_Overview (channel,sub_channel,date,timestamp,month,week, impression_by_date, users_by_date, day_week, marketer_job_titles_by_date,time_spent_on_site_page_podcast_vodcast)\\n    select\\n        \\'eLearning\\' as \\'channel\\'\\n        ,\\'Absorb\\' as \\'sub_channel\\'\\n        , date_enrolled \\n        , date_enrolled as timestamp\\n        , cast(format(date_enrolled, \\'yyyyMM\\') as int) as month\\n        , cast(concat(left(date_enrolled,4),  right(datepart(ww, date_enrolled) + 100, 2)) as int) as week\\n        , 1 as impression_by_date\\n        , 1 as users_by_date\\n        , datepart(dw, date_enrolled) as day_week\\n        , job_title as marketer_job_titles_by_date\\n        , time_spent_min as time_spent_on_site_page_podcast_vodcast\\n    from run_tot\\n    order by date_enrolled','drop table if exists Temp_Raw_Absorb'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          last_name = {Last Name},",
						"          first_name = {First Name},",
						"          department = Department,",
						"          date_completed = {Date Completed},",
						"          attained_certificate = {Attained Certificate},",
						"          certificate_date = {Certificate Date},",
						"          status = Status,",
						"          progress = Progress,",
						"          job_title = {Job Title},",
						"          time_spent_min = {Time Spent (min)},",
						"          date_enrolled = {Date Enrolled},",
						"          last_logged_in = {Last Logged In},",
						"          email_address = {Email Address}",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Absorb_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/Absorb_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GA_Engagement_Overview_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The derived column and window components have been added to calculated the unique row index i.e rowNumber()",
				"folder": {
					"name": "GoogleAnalytics"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GA_Engagement_Overview_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GA_Engagement_Overview_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true,",
						"     partitionBy('hash', 1)) ~> SourceProcessFiles",
						"SourceProcessFiles derive(order_id = 1) ~> derivedColumn1",
						"derivedColumn1 window(over(order_id),",
						"     asc(order_id, true),",
						"     id = rowNumber()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['drop table if exists Temp_Raw_GA_Engagement_Overview','CREATE TABLE Temp_Raw_GA_Engagement_Overview(\\n     Column_1 varchar(80) null\\n     , Column_2 varchar(80) null\\n     , Column_3 varchar(80) null\\n     , Column_4 varchar(80) null\\n    , id int not null\\n)'],",
						"     postSQLs:['with getColNo as (\\n    select top 1\\n        id\\n    from Temp_Raw_GA_Engagement_Overview\\n    where trim(Column_2) = \\'Views\\'\\n    and trim(Column_1) = \\'Nth day\\'    \\n)\\n, date_extract as (\\n    select top 1\\n        cast(right((select Column_1 from Temp_Raw_GA_Engagement_Overview where id = (b.id - 2)), 8) as date) as start_date\\n        , cast(right((select Column_1 from Temp_Raw_GA_Engagement_Overview where id = (b.id - 1)), 8) as date) as end_date\\n        , b.id as select_id\\n    from Temp_Raw_GA_Engagement_Overview a\\n    cross join getColNo b\\n)\\n, date_range as ( \\n    select \\n        start_date\\n        , end_date\\n        , datediff(day, start_date, end_date) as no_days\\n        , select_id\\n    from date_extract\\n)\\n, final_table as (\\n    select\\n    cast(dateadd(day, cast(a.Column_1 as int), b.start_date) as date) as date\\n    , cast(trim(a.Column_2) as float) as val\\n    from Temp_Raw_GA_Engagement_Overview a\\n    cross join date_range b\\n    where a.id between (b.select_id + 1) and (b.no_days + (b.select_id + 1))\\n)\\n\\n--select * from final_table   \\n\\nMERGE INTO Changemakers_Combined_Overview a\\nUSING final_table b\\n    ON a.channel = \\'Website\\' \\n    and a.sub_channel = \\'Digital Changemakers Hub\\'\\n    and a.date = b.date \\nWHEN MATCHED THEN\\n  UPDATE SET a.impression_by_date = b.val\\n\\nWHEN NOT MATCHED THEN\\n  INSERT (channel, sub_channel, date, timestamp, month, week, impression_by_date)\\n  VALUES (\\n        \\'Website\\'\\n        , \\'Digital Changemakers Hub\\'\\n        , b.date \\n        , b.date\\n        , cast(format(b.date, \\'yyyyMM\\') as int)\\n        , cast(concat(left(b.date,4),  right(datepart(ww, b.date) + 100, 2)) as int)\\n        , b.val\\n        );','with getColNo as (\\n    select top 1\\n        id\\n    from Temp_Raw_GA_Engagement_Overview\\n    where trim(Column_2) = \\'Event count\\'\\n    and trim(Column_1) = \\'Nth day\\'\\n)\\n, date_extract as (\\n    select top 1\\n        cast(right((select Column_1 from Temp_Raw_GA_Engagement_Overview where id = (b.id - 2)), 8) as date) as start_date\\n        , cast(right((select Column_1 from Temp_Raw_GA_Engagement_Overview where id = (b.id - 1)), 8) as date) as end_date\\n        , b.id as select_id\\n    from Temp_Raw_GA_Engagement_Overview a\\n    cross join getColNo b\\n)\\n, date_range as ( \\n    select \\n        start_date\\n        , end_date\\n        , datediff(day, start_date, end_date) as no_days\\n        , select_id\\n    from date_extract\\n)\\n, final_table as (\\n    select \\n        cast(dateadd(day, cast(a.Column_1 as int), b.start_date) as date) as date\\n        , cast(a.Column_2 as float) as val\\n        -- , b.select_id\\n    from Temp_Raw_GA_Engagement_Overview a\\n    cross join date_range b\\n    where a.id between (b.select_id + 1) and (b.no_days + (b.select_id + 1))\\n)\\nMERGE INTO Changemakers_Combined_Overview a\\nUSING final_table b\\n    ON a.channel = \\'Website\\' \\n    and a.sub_channel = \\'Digital Changemakers Hub\\'\\n    and a.date = b.date \\nWHEN MATCHED THEN\\n  UPDATE SET a.click_through_rate = b.val\\n\\nWHEN NOT MATCHED THEN\\n  INSERT (channel, sub_channel, date, timestamp, month, week, click_through_rate)\\n  VALUES (\\n        \\'Website\\'\\n        , \\'Digital Changemakers Hub\\'\\n        , b.date \\n        , b.date\\n        , cast(format(b.date, \\'yyyyMM\\') as int)\\n        , cast(concat(left(b.date,4),  right(datepart(ww, b.date) + 100, 2)) as int)\\n        , b.val\\n        );','with getColNo as (\\n    select top 1\\n        id\\n    from Temp_Raw_GA_Engagement_Overview\\n    where trim(Column_2) = \\'Average engagement time\\'\\n    and trim(Column_1) = \\'Nth day\\'\\n)\\n, date_extract as (\\n    select top 1\\n        cast(right((select Column_1 from Temp_Raw_GA_Engagement_Overview where id = (b.id - 2)), 8) as date) as start_date\\n        , cast(right((select Column_1 from Temp_Raw_GA_Engagement_Overview where id = (b.id - 1)), 8) as date) as end_date\\n        , b.id as select_id\\n    from Temp_Raw_GA_Engagement_Overview a\\n    cross join getColNo b\\n)\\n, date_range as ( \\n    select \\n        start_date\\n        , end_date\\n        , datediff(day, start_date, end_date) as no_days\\n        , select_id\\n    from date_extract\\n)\\n, final_table as (\\n    select \\n        cast(dateadd(day, cast(a.Column_1 as int), b.start_date) as date) as date\\n        , cast(a.Column_2 as float) as val\\n        -- , b.select_id\\n    from Temp_Raw_GA_Engagement_Overview a\\n    cross join date_range b\\n    where a.id between (b.select_id + 1) and (b.no_days + (b.select_id + 1))\\n)\\n--select * from final_table\\n\\nMERGE INTO Changemakers_Combined_Overview a\\nUSING final_table b\\n    ON a.channel = \\'Website\\' \\n    and a.sub_channel = \\'Digital Changemakers Hub\\'\\n    and a.date = b.date \\nWHEN MATCHED THEN\\n  UPDATE SET a.time_spent_on_site_page_podcast_vodcast = b.val\\n\\nWHEN NOT MATCHED THEN\\n  INSERT (channel, sub_channel, date, timestamp, month, week, time_spent_on_site_page_podcast_vodcast)\\n  VALUES (\\n        \\'Website\\'\\n        , \\'Digital Changemakers Hub\\'\\n        , b.date \\n        , b.date\\n        , cast(format(b.date, \\'yyyyMM\\') as int)\\n        , cast(concat(left(b.date,4),  right(datepart(ww, b.date) + 100, 2)) as int)\\n        , b.val\\n  );','drop table if exists Temp_Raw_GA_Engagement_Overview'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Column_1,",
						"          Column_2,",
						"          Column_3,",
						"          Column_4,",
						"          id",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GA_Engagement_Overview_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/GA_Engagement_Overview_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GA_Snapshot_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The derived column and window components have been added to calculated the unique row index i.e rowNumber()",
				"folder": {
					"name": "GoogleAnalytics"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GA_Snapshot_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GA_Snapshot_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true,",
						"     partitionBy('hash', 1)) ~> SourceProcessFiles",
						"SourceProcessFiles derive(order_id = 1) ~> derivedColumn1",
						"derivedColumn1 window(over(order_id),",
						"     asc(order_id, true),",
						"     id = rowNumber()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['drop table if exists Temp_Raw_GA_Snapshot','CREATE TABLE Temp_Raw_GA_Snapshot(\\n     Column_1 varchar(80) null\\n     , Column_2 varchar(80) null\\n     , Column_3 varchar(80) null\\n     , Column_4 varchar(80) null\\n     , Column_5 varchar(80) null\\n     , Column_6 varchar(80) null\\n     , Column_7 varchar(80) null\\n    , id int not null\\n)'],",
						"     postSQLs:['with getColNo as (\\n    select top 1\\n        id\\n    from Temp_Raw_GA_Snapshot\\n    where trim(Column_2) = \\'New users\\'\\n    and trim(Column_1) = \\'Nth day\\'    \\n)\\n, date_extract as (\\n    select top 1\\n        cast(right((select Column_1 from Temp_Raw_GA_Snapshot where id = (b.id - 2)), 8) as date) as start_date\\n        , cast(right((select Column_1 from Temp_Raw_GA_Snapshot where id = (b.id - 1)), 8) as date) as end_date\\n        , b.id as select_id\\n    from Temp_Raw_GA_Snapshot a\\n    cross join getColNo b\\n)\\n, date_range as ( \\n    select \\n        start_date\\n        , end_date\\n        , datediff(day, start_date, end_date) as no_days\\n        , select_id\\n    from date_extract\\n)\\n, final_table as (\\n    select\\n    cast(dateadd(day, cast(a.Column_1 as int), b.start_date) as date) as date\\n    , cast(trim(a.Column_2) as float) as val\\n    from Temp_Raw_GA_Snapshot a\\n    cross join date_range b\\n    where a.id between (b.select_id + 1) and (b.no_days + (b.select_id + 1))\\n)\\n\\n--select * from final_table   \\n\\nMERGE INTO Changemakers_Combined_Overview a\\nUSING final_table b\\n    ON a.channel = \\'Website\\' \\n    and a.sub_channel = \\'Digital Changemakers Hub\\'\\n    and a.date = b.date \\nWHEN MATCHED THEN\\n  UPDATE SET a.users_by_date = b.val\\n\\nWHEN NOT MATCHED THEN\\n  INSERT (channel,sub_channel,date,timestamp,month,week,users_by_date)\\n  VALUES (\\n        \\'Website\\'\\n        , \\'Digital Changemakers Hub\\'\\n        , b.date \\n        , b.date\\n        , cast(format(b.date, \\'yyyyMM\\') as int)\\n        , cast(concat(left(b.date,4),  right(datepart(ww, b.date) + 100, 2)) as int)\\n        , b.val\\n        );','drop table if exists Temp_Raw_GA_Snapshot'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Column_1,",
						"          Column_2,",
						"          Column_3,",
						"          Column_4,",
						"          id",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GA_Snapshot_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/GA_Snapshot_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinCampaign_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Linkedin"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LinkedinCampaign_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LinkedinCampaign_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Start Date (in UTC)} as string,",
						"          {Account Name} as string,",
						"          Currency as string,",
						"          {Campaign Group ID} as string,",
						"          {Campaign Group Name} as string,",
						"          {Campaign Group Status} as string,",
						"          {Campaign Group Start Date} as string,",
						"          {Campaign Group End Date} as string,",
						"          {Campaign Group Total Budget} as string,",
						"          {Campaign ID} as string,",
						"          {Campaign Name} as string,",
						"          {Campaign Objective} as string,",
						"          {Campaign Type} as string,",
						"          {Campaign Status} as string,",
						"          {Cost Type} as string,",
						"          {Total Budget} as string,",
						"          {Campaign Start Date} as string,",
						"          {Campaign End Date} as string,",
						"          {Total Spent} as string,",
						"          Impressions as string,",
						"          Clicks as string,",
						"          {Click Through Rate} as string,",
						"          {Average CPM} as string,",
						"          {Average CPC} as string,",
						"          Reactions as string,",
						"          Comments as string,",
						"          Shares as string,",
						"          Follows as string,",
						"          {Other Clicks} as string,",
						"          {Total Social Actions} as string,",
						"          {Total Engagements} as string,",
						"          {Engagement Rate} as string,",
						"          {Viral Impressions} as string,",
						"          {Viral Clicks} as string,",
						"          {Viral Reactions} as string,",
						"          {Viral Comments} as string,",
						"          {Viral Shares} as string,",
						"          {Viral Follows} as string,",
						"          {Viral Other Clicks} as string,",
						"          Conversions as string,",
						"          {Post-Click Conversions} as string,",
						"          {View-Through Conversions} as string,",
						"          {Conversion Rate} as string,",
						"          {Cost per Conversion} as string,",
						"          {Total Conversion Value} as string,",
						"          {Return on Ad Spend} as string,",
						"          {Viral Conversions} as string,",
						"          {Viral Post-Click Conversions} as string,",
						"          {Viral View-Through Conversions} as string,",
						"          Leads as string,",
						"          {Lead Forms Opened} as string,",
						"          {Lead Form Completion Rate} as string,",
						"          {Cost per Lead} as string,",
						"          {Video Plays} as string,",
						"          {Video Views} as string,",
						"          {Video View Rate} as string,",
						"          {Video Views at 25%} as string,",
						"          {Video Views at 50%} as string,",
						"          {Video Views at 75%} as string,",
						"          {Video Completions} as string,",
						"          {Video Completion Rate} as string,",
						"          {Full Screen Plays} as string,",
						"          eCPV as string,",
						"          {Viral Video Plays} as string,",
						"          {Viral Video Views} as string,",
						"          {Viral Video Views at 25%} as string,",
						"          {Viral Video Views at 50%} as string,",
						"          {Viral Video Views at 75%} as string,",
						"          {Viral Video Completions} as string,",
						"          {Viral Video Completion Rate} as string,",
						"          {Viral Video Full Screen Plays} as string,",
						"          {Event Registrations} as string,",
						"          {Click Event Registrations} as string,",
						"          {View Event Registrations} as string,",
						"          {Viral Event Registrations} as string,",
						"          {Viral Click Event Registrations} as string,",
						"          {Viral View Event Registrations} as string,",
						"          {Average Daily Spend} as string,",
						"          {Clicks to Landing Page} as string,",
						"          {Clicks to LinkedIn Page} as string,",
						"          {Leads (Work Email)} as string,",
						"          {Lead Form Completion Rate (Work Email)} as string,",
						"          {Cost Per Lead (Work Email)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinCampaign_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/LinkedinCampaign_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContentAllPosts_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Linkedin"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LinkedinContentAllPosts_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles",
							"description": "Import data from LinkedinContentAllPosts_GetFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LinkedinContentAllPosts_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Post title} as string,",
						"          {Post link} as string,",
						"          {Post type} as string,",
						"          {Campaign name} as string,",
						"          {Posted by} as string,",
						"          {Created date} as date 'MM/dd/yyyy',",
						"          {Campaign start date} as date 'MM/dd/yyyy',",
						"          {Campaign end date} as date 'MM/dd/yyyy',",
						"          Audience as string,",
						"          Impressions as integer,",
						"          {Views (Excluding offsite video views)} as integer,",
						"          {Offsite Views} as integer,",
						"          Clicks as integer,",
						"          {Click through rate (CTR)} as double,",
						"          Likes as integer,",
						"          Comments as integer,",
						"          Reposts as integer,",
						"          Follows as integer,",
						"          {Engagement rate} as double,",
						"          {Content Type} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     postSQLs:['delete from Temp_Raw_LinkedinContentAllPosts where post_title is null','with exist_check as (\\n  select distinct post_title \\n  from Raw_LinkedinContentAllPosts\\n)\\ninsert into Raw_LinkedinContentAllPosts\\n    select \\n      a.created_date as date\\n      , a.post_title\\n      , a.post_link\\n      , a.post_type\\n      , a.campaign_name\\n      , a.posted_by\\n      , a.created_date\\n      , a.campaign_start_date\\n      , a.campaign_end_date\\n      , a.audience\\n      , a.impressions\\n      , a.views\\n      , a.offsite_views\\n      , a.clicks\\n      , a.click_through_rate\\n      , a.likes\\n      , a.comments\\n      , a.reposts\\n      , a.follows\\n      , a.engagement_rate\\n      , a.content_type\\n    from Temp_Raw_LinkedinContentAllPosts a\\n    left outer join exist_check b on a.post_title = b.post_title \\n    where b.post_title is null','with raw_data as (\\n    select \\n        post_title\\n        ,sum(impressions) as impressions\\n        ,sum(views) as views\\n        ,sum(offsite_views) as offsite_views\\n        ,sum(clicks) as clicks\\n        ,sum(click_through_rate) as click_through_rate\\n        ,sum(likes) as likes\\n        ,sum(comments) as comments\\n        ,sum(reposts) as reposts\\n        ,sum(follows) as follows\\n        ,sum(engagement_rate) as engagement_rate\\n    from Raw_LinkedinContentAllPosts\\n    group by post_title\\n)\\ninsert into Raw_LinkedinContentAllPosts\\n    select\\n      cast(getdate() as date) as date \\n      , trg.post_title\\n      , trg.post_link\\n      , trg.post_type\\n      , trg.campaign_name\\n      , trg.posted_by\\n      , trg.created_date\\n      , trg.campaign_start_date\\n      , trg.campaign_end_date\\n      , trg.audience\\n      , case when rg.impressions is null then trg.impressions else (trg.impressions - rg.impressions) end as impressions\\n      , case when rg.views is null then trg.views else (trg.views - rg.views) end as views\\n      , case when rg.offsite_views is null then trg.offsite_views else (trg.offsite_views - rg.offsite_views) end as offsite_views\\n      , case when rg.clicks is null then trg.clicks else (trg.clicks - rg.clicks) end as clicks\\n      , case when rg.click_through_rate is null then trg.click_through_rate else (trg.click_through_rate - rg.click_through_rate) end as click_through_rate\\n      , case when rg.likes is null then trg.likes else (trg.likes - rg.likes) end as likes\\n      , case when rg.comments is null then trg.comments else (trg.comments - rg.comments) end as comments\\n      , case when rg.reposts is null then trg.reposts else (trg.reposts - rg.reposts) end as reposts\\n      , case when rg.follows is null then trg.follows else (trg.follows - rg.follows) end as follows\\n      , case when rg.engagement_rate is null then trg.engagement_rate else (trg.engagement_rate - rg.engagement_rate) end as engagement_rate\\n      , trg.content_type\\n    from Temp_Raw_LinkedinContentAllPosts trg\\n    left outer join raw_data rg\\n    on trg.post_title = rg.post_title\\n    where trg.impressions - rg.impressions > 0','delete from Changemakers_Combined_Overview where sub_channel = \\'Linkedin Organic\\' and activity_calendar_events is not null','insert into Changemakers_Combined_Overview (channel,sub_channel,date,timestamp,month,week,activity_calendar_events,event_occurence_by_date,event_occurence_by_time,activity_implemented_by,conversion_listened_watched,listened_watched_full_podcast_episode)\\nselect\\n    \\'Social Media\\' as \\'channel\\'\\n    ,\\'Linkedin Organic\\' as \\'sub_channel\\'\\n    , date \\n    , date as timestamp\\n    , cast(format(date, \\'yyyyMM\\') as int) as month\\n    , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\\n    , post_title as activity_calendar_events\\n    , created_date as event_occurence_by_date\\n    , case when campaign_start_date is null then created_date end as event_occurence_by_time\\n    , posted_by as activity_implemented_by\\n    , clicks as conversion_listened_watched\\n    , clicks as listened_watched_full_podcast_episode\\nfrom Raw_LinkedinContentAllPosts','drop table if exists Temp_Raw_LinkedinContentAllPosts'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          post_title = {Post title},",
						"          post_link = {Post link},",
						"          post_type = {Post type},",
						"          campaign_name = {Campaign name},",
						"          posted_by = {Posted by},",
						"          created_date = {Created date},",
						"          campaign_start_date = {Campaign start date},",
						"          campaign_end_date = {Campaign end date},",
						"          audience = Audience,",
						"          impressions = Impressions,",
						"          views = {Views (Excluding offsite video views)},",
						"          offsite_views = {Offsite Views},",
						"          clicks = Clicks,",
						"          click_through_rate = {Click through rate (CTR)},",
						"          likes = Likes,",
						"          comments = Comments,",
						"          reposts = Reposts,",
						"          follows = Follows,",
						"          engagement_rate = {Engagement rate},",
						"          content_type = {Content Type}",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinContentAllPosts_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/LinkedinContentAllPosts_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinContentMetrics_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Linkedin"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LinkedinContentMetrics_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles",
							"description": "Import data from LinkedinContentMetrics_GetFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LinkedinContentMetrics_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Date as date 'MM/dd/yyyy',",
						"          {Impressions (organic)} as integer,",
						"          {Impressions (sponsored)} as integer,",
						"          {Impressions (total)} as integer,",
						"          {Unique impressions (organic)} as integer,",
						"          {Clicks (organic)} as integer,",
						"          {Clicks (sponsored)} as integer,",
						"          {Clicks (total)} as integer,",
						"          {Reactions (organic)} as integer,",
						"          {Reactions (sponsored)} as integer,",
						"          {Reactions (total)} as integer,",
						"          {Comments (organic)} as integer,",
						"          {Comments (sponsored)} as integer,",
						"          {Comments (total)} as integer,",
						"          {Reposts (organic)} as integer,",
						"          {Reposts (sponsored)} as integer,",
						"          {Reposts (total)} as integer,",
						"          {Engagement rate (organic)} as double '0',",
						"          {Engagement rate (sponsored)} as double '0',",
						"          {Engagement rate (total)} as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     postSQLs:['delete from Raw_LinkedinContent where \\ndate in (select distinct date from Temp_Raw_LinkedinContent where date is not null)','insert Raw_LinkedinContent\\nselect * from Temp_Raw_LinkedinContent','delete from Changemakers_Combined_Overview where sub_channel = \\'Linkedin Organic\\' and date >= (select cast(dateadd(day, -35, max(date)) as date) from Temp_Raw_LinkedinContent)','insert into Changemakers_Combined_Overview (channel,sub_channel,date,timestamp,month,week,impression_by_date, users_by_date,likes_consid_engage_by_date, shares_by_date,comments_by_date,total_engagements,conversion_total_clicks,click_through_rate)\\nselect\\n    \\'Social Media\\' as \\'channel\\'\\n    ,\\'Linkedin Organic\\' as \\'sub_channel\\'\\n    , rlc.date \\n    , rlc.date as timestamp\\n    , cast(format(rlc.date, \\'yyyyMM\\') as int) as month\\n    , cast(concat(left(rlc.date,4),  right(datepart(ww, rlc.date) + 100, 2)) as int) as week\\n    , rlc.impressions_total as impression_by_date\\n    , rlc.impressions_total as users_by_date\\n    , rlc.reactions_total as likes_consid_engage_by_date\\n    , rlc.reposts_total as shares_by_date\\n    , rlc.comments_total as comments_by_date\\n    , (rlc.reactions_total + rlc.reposts_total + rlc.comments_total + rlc.clicks_total) as total_engagements\\n    , rlc.clicks_total as conversion_total_clicks\\n    , case when rlc.impressions_total = 0 then 0 else (cast(rlc.clicks_total as decimal) / cast(rlc.impressions_total as decimal) * 100) end as click_through_rate  \\nfrom Raw_LinkedinContent rlc\\nleft outer join Raw_LinkedinVisitors rlv on rlc.date = rlv.date\\nwhere rlc.date >= (select cast(dateadd(day, -35, max(date)) as date) from Temp_Raw_LinkedinContent) ','drop table if exists Temp_Raw_LinkedinContent'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date = Date,",
						"          impressions_organic = {Impressions (organic)},",
						"          impressions_sponsored = {Impressions (sponsored)},",
						"          impressions_total = {Impressions (total)},",
						"          unique_impressions_organic = {Unique impressions (organic)},",
						"          clicks_organic = {Clicks (organic)},",
						"          clicks_ssponsored = {Clicks (sponsored)},",
						"          clicks_total = {Clicks (total)},",
						"          reactions_organic = {Reactions (organic)},",
						"          reactions_sponsored = {Reactions (sponsored)},",
						"          reactions_total = {Reactions (total)},",
						"          comments_organic = {Comments (organic)},",
						"          comments_sponsored = {Comments (sponsored)},",
						"          comments_total = {Comments (total)},",
						"          reposts_organic = {Reposts (organic)},",
						"          reposts_sponsored = {Reposts (sponsored)},",
						"          reposts_total = {Reposts (total)},",
						"          engagement_rate_organic = {Engagement rate (organic)},",
						"          engagement_rate_sponsored = {Engagement rate (sponsored)},",
						"          engagement_rate_total = {Engagement rate (total)}",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinContentMetrics_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/LinkedinContentMetrics_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinFollowers_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Linkedin"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LinkedinFollowers_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LinkedinFollowers_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Date as date 'MM/dd/yyyy',",
						"          {Sponsored followers} as integer,",
						"          {Organic followers} as integer,",
						"          {Total followers} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     postSQLs:['delete from Raw_LinkedinFollowers where \\ndate in (select distinct date from Temp_Raw_LinkedinFollowers where date is not null)','insert into Raw_LinkedinFollowers\\nselect * from Temp_Raw_LinkedinFollowers','drop table if exists Temp_Raw_LinkedinFollowers'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date = Date,",
						"          sponsored_followers = {Sponsored followers},",
						"          organic_followers = {Organic followers},",
						"          total_followers = {Total followers}",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinFollowers_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/LinkedinFollowers_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedinVisitors_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Linkedin"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LinkedinVisitors_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LinkedinVisitors_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Date as date 'MM/dd/yyyy',",
						"          {Overview page views (desktop)} as integer,",
						"          {Overview page views (mobile)} as integer,",
						"          {Overview page views (total)} as integer,",
						"          {Overview unique visitors (desktop)} as integer,",
						"          {Overview unique visitors (mobile)} as integer,",
						"          {Overview unique visitors (total)} as integer,",
						"          {Life page views (desktop)} as integer,",
						"          {Life page views (mobile)} as integer,",
						"          {Life page views (total)} as integer,",
						"          {Life unique visitors (desktop)} as integer,",
						"          {Life unique visitors (mobile)} as integer,",
						"          {Life unique visitors (total)} as integer,",
						"          {Jobs page views (desktop)} as integer,",
						"          {Jobs page views (mobile)} as integer,",
						"          {Jobs page views (total)} as integer,",
						"          {Jobs unique visitors (desktop)} as integer,",
						"          {Jobs unique visitors (mobile)} as integer,",
						"          {Jobs unique visitors (total)} as integer,",
						"          {Total page views (desktop)} as integer,",
						"          {Total page views (mobile)} as integer,",
						"          {Total page views (total)} as integer,",
						"          {Total unique visitors (desktop)} as integer,",
						"          {Total unique visitors (mobile)} as integer,",
						"          {Total unique visitors (total)} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     postSQLs:['delete from Raw_LinkedinVisitors where \\ndate in (select distinct date from Temp_Raw_LinkedinVisitors where date is not null)','insert into Raw_LinkedinVisitors\\nselect * from Temp_Raw_LinkedinVisitors where date is not null','drop table if exists Temp_Raw_LinkedinVisitors'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date = Date,",
						"          overview_page_views_desktop = {Overview page views (desktop)},",
						"          overview_page_views_mobile = {Overview page views (mobile)},",
						"          overview_page_views_total = {Overview page views (total)},",
						"          overview_unique_visitors_desktop = {Overview unique visitors (desktop)},",
						"          overview_unique_visitors_mobile = {Overview unique visitors (mobile)},",
						"          overview_unique_visitors_total = {Overview unique visitors (total)},",
						"          life_page_views_desktop = {Life page views (desktop)},",
						"          life_page_views_mobile = {Life page views (mobile)},",
						"          life_page_views_total = {Life page views (total)},",
						"          life_unique_visitors_desktop = {Life unique visitors (desktop)},",
						"          life_unique_visitors_mobile = {Life unique visitors (mobile)},",
						"          life_unique_visitors_total = {Life unique visitors (total)},",
						"          jobs_page_views_desktop = {Jobs page views (desktop)},",
						"          jobs_page_views_mobile = {Jobs page views (mobile)},",
						"          jobs_page_views_total = {Jobs page views (total)},",
						"          {jobs_unique_ visitors_desktop} = {Jobs unique visitors (desktop)},",
						"          jobs_unique_visitors_mobile = {Jobs unique visitors (mobile)},",
						"          jobs_unique_visitors_total = {Jobs unique visitors (total)},",
						"          total_page_views_desktop = {Total page views (desktop)},",
						"          total_page_views_mobile = {Total page views (mobile)},",
						"          total_page_views_total = {Total page views (total)},",
						"          total_unique_visitors_desktop = {Total unique visitors (desktop)},",
						"          total_unique_visitors_mobile = {Total unique visitors (mobile)},",
						"          total_unique_visitors_total = {Total unique visitors (total)}",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LinkedinVisitors_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/LinkedinVisitors_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Twitter_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Twitter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Twitter_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Twitter_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Date as date 'yyyy-MM-dd',",
						"          {Tweets published} as integer '000',",
						"          impressions as integer '000',",
						"          engagements as integer '000',",
						"          {engagement rate} as double '###,###,000.###',",
						"          retweets as integer '000',",
						"          replies as integer '000',",
						"          likes as integer '000',",
						"          {user profile clicks} as integer '000',",
						"          {url clicks} as integer '0',",
						"          {hashtag clicks} as integer '0',",
						"          {detail expands} as integer '0',",
						"          {permalink clicks} as integer '0',",
						"          {app opens} as integer '0',",
						"          {app installs} as integer '0',",
						"          follows as integer '0',",
						"          {email tweet} as integer '000',",
						"          {dial phone} as integer '000',",
						"          {media views} as integer '000',",
						"          {media engagements} as integer '000',",
						"          {promoted impressions} as integer '000',",
						"          {promoted engagements} as integer '000',",
						"          {promoted engagement rate} as integer '000',",
						"          {promoted retweets} as integer '000',",
						"          {promoted replies} as integer '000',",
						"          {promoted likes} as integer '000',",
						"          {promoted user profile clicks} as integer '000',",
						"          {promoted url clicks} as integer '000',",
						"          {promoted hashtag clicks} as integer '000',",
						"          {promoted detail expands} as integer '000',",
						"          {promoted permalink clicks} as integer '000',",
						"          {promoted app opens} as integer '000',",
						"          {promoted app installs} as integer '000',",
						"          {promoted follows} as integer '000',",
						"          {promoted email tweet} as integer '000',",
						"          {promoted dial phone} as integer '000',",
						"          {promoted media views} as integer '000',",
						"          {promoted media engagements} as integer '000'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     postSQLs:['delete from Raw_Twitter where \\ndate in (select distinct date from Temp_Raw_Twitter where date is not null)','insert Raw_Twitter\\nselect * from Temp_Raw_Twitter','delete from Changemakers_Combined_Overview where sub_channel = \\'Twitter\\'','insert into Changemakers_Combined_Overview (channel,sub_channel,date,timestamp,month,week, impression_by_date, users_by_date, activity_calendar_events, event_occurence_by_date, event_occurence_by_time, activity_implemented_by, likes_consid_engage_by_date, shares_by_date, comments_by_date, follows_by_date, total_engagements, conversion_total_clicks, click_through_rate, conversion_listened_watched, listened_watched_full_podcast_episode, video_view_rate, video_completion_rate )\\n  select\\n    \\'Social Media\\' as \\'channel\\'\\n    ,\\'Twitter\\' as \\'sub_channel\\'\\n    , date \\n    , date as timestamp\\n    , cast(format(date, \\'yyyyMM\\') as int) as month\\n    , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\\n    , impressions as impression_by_date\\n    , impressions as users_by_date\\n    , tweets_published as activity_calendar_events\\n    , date as event_occurence_by_date\\n    , date as event_occurence_by_time\\n    , \\'Janet Guest\\' as activity_implemented_by\\n    , likes as likes_consid_engage_by_date\\n    , retweets as shares_by_date\\n    , replies as comments_by_date\\n    , follows as follows_by_date\\n    , (likes + retweets + replies + follows + user_profile_clicks + url_clicks + hashtag_clicks)  as total_engagements\\n    , (user_profile_clicks + url_clicks + hashtag_clicks + detail_expands + permalink_clicks + app_opens + app_installs) as conversion_total_clicks\\n    , case when impressions = 0 then 0 else cast((user_profile_clicks + url_clicks + hashtag_clicks + detail_expands + permalink_clicks + app_opens + app_installs) as decimal) / cast(impressions as decimal) * 100 end as click_through_rate\\n    , media_views as conversion_listened_watched\\n    , media_views as listened_watched_full_podcast_episode\\n    , case when impressions = 0 then 0 else (cast(media_views as decimal) / cast(impressions as decimal) * 100) end as video_view_rate\\n    , case when impressions = 0 then 0 else (cast(media_views as decimal) / cast(impressions as decimal) * 100) end as video_completion_rate\\nfrom Raw_Twitter','drop table if exists Temp_Raw_Twitter'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date = Date,",
						"          tweets_published = {Tweets published},",
						"          impressions,",
						"          engagements,",
						"          engagement_rate = {engagement rate},",
						"          retweets,",
						"          replies,",
						"          likes,",
						"          user_profile_clicks = {user profile clicks},",
						"          url_clicks = {url clicks},",
						"          hashtag_clicks = {hashtag clicks},",
						"          detail_expands = {detail expands},",
						"          permalink_clicks = {permalink clicks},",
						"          app_opens = {app opens},",
						"          app_installs = {app installs},",
						"          follows,",
						"          email_tweet = {email tweet},",
						"          dial_phone = {dial phone},",
						"          media_views = {media views},",
						"          media_engagements = {media engagements}",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Twitter_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/Twitter_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_LikesLogReports_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Umbraco"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Umbraco_LikesLogReports_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Umbraco_LikesLogReports_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ContentId as string,",
						"          ContentName as string,",
						"          DateSubmitted as string,",
						"          DownVotes as string,",
						"          Votes as string,",
						"          Name as string,",
						"          Email as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ContentId,",
						"          ContentName,",
						"          DateSubmitted,",
						"          DownVotes,",
						"          Votes,",
						"          Name,",
						"          Email",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Umbraco_LikesLogReports_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/Umbraco_LikesLogReports_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Umbraco_MediaLogReports_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Umbraco"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Umbraco_LikesLogReports_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Umbraco_LikesLogReports_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ContentId as string,",
						"          ContentName as string,",
						"          DateSubmitted as string,",
						"          DownVotes as string,",
						"          Votes as string,",
						"          Name as string,",
						"          Email as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ContentId,",
						"          ContentName,",
						"          DateSubmitted,",
						"          DownVotes,",
						"          Votes,",
						"          Name,",
						"          Email",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Umbraco_LikesLogReports_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/Umbraco_LikesLogReports_AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vimeo_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Vimeo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Vimeo_GetFiles",
								"type": "DatasetReference"
							},
							"name": "SourceProcessFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vimeo_AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          plays as integer,",
						"          loads as integer,",
						"          downloads as integer,",
						"          finishes as integer,",
						"          likes as integer,",
						"          comments as integer,",
						"          uri as string,",
						"          name as string,",
						"          created_time as string,",
						"          sizes as string,",
						"          unique_viewers as integer,",
						"          mean_percent as integer,",
						"          sum_seconds as integer,",
						"          mean_seconds as integer,",
						"          unique_loads as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true) ~> SourceProcessFiles",
						"SourceProcessFiles derive(created_time = toTimestamp(created_time, \"yyyy-MM-dd'T'HH:mm:ss\")) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     postSQLs:['insert into Raw_Vimeo\\n    select \\n        CAST(GETDATE() AS DATE) as date\\n        ,a.plays\\n        ,a.loads\\n        ,a.downloads\\n        ,a.finishes\\n        ,a.likes\\n        ,a.comments\\n        ,a.uri\\n        ,a.name\\n        ,a.created_time\\n        ,a.sizes\\n        ,a.unique_viewers\\n        ,a.mean_percent\\n        ,a.sum_seconds\\n        ,a.mean_seconds\\n        ,a.unique_loads\\n    from Temp_Raw_Vimeo a\\n    left outer join Raw_Vimeo b on a.uri = b.uri\\n    where a.uri is not null \\n    and b.uri is null','with raw_data as (\\n    SELECT \\n        uri\\n        ,sum(plays) as plays\\n        ,sum(loads) as loads\\n        ,sum(downloads) as downloads\\n        ,sum(finishes) as finishes\\n        ,sum(likes) as likes\\n        ,sum(comments) as comments\\n        ,sum(unique_viewers) as unique_viewers\\n        ,sum(mean_percent) as mean_percent\\n        ,sum(sum_seconds) as sum_seconds\\n        ,sum(mean_seconds) as mean_seconds\\n        ,sum(unique_loads) as unique_loads\\n    FROM Raw_Vimeo\\n    group by uri \\n)\\ninsert into Raw_Vimeo\\n    SELECT \\n        CAST(GETDATE() AS DATE) as date\\n        ,case when r.plays is null then t.plays else (t.plays - r.plays) end as plays  \\n        ,case when t.loads is null then t.loads else (t.loads - r.loads) end as loads\\n        ,case when t.downloads is null then t.downloads else (t.downloads - r.downloads) end as downloads\\n        ,case when t.finishes is null then t.finishes else (t.finishes - r.finishes) end as finishes\\n        ,case when t.likes is null then t.likes else (t.likes - r.likes) end as likes\\n        ,case when t.comments is null then t.comments else (t.comments - r.comments) end as comments\\n        ,t.uri\\n        ,t.name\\n        ,t.created_time\\n        ,t.sizes\\n        ,case when t.unique_viewers is null then t.unique_viewers else (t.unique_viewers - r.unique_viewers) end as unique_viewers\\n        ,case when t.mean_percent is null then t.mean_percent else (t.mean_percent - r.mean_percent) end as mean_percent\\n        ,case when t.sum_seconds is null then t.sum_seconds else (t.sum_seconds - r.sum_seconds) end as sum_seconds\\n        ,case when t.mean_seconds is null then t.mean_seconds else (t.mean_seconds - r.mean_seconds) end as mean_seconds\\n        ,case when t.unique_loads is null then t.unique_loads else (t.unique_loads - r.unique_loads) end as unique_loads\\n    FROM Temp_Raw_Vimeo t\\n    inner join raw_data r on t.uri = r.uri\\n    where t.unique_viewers != r.unique_viewers','delete from Changemakers_Combined_Overview where sub_channel = \\'Vimeo\\';','insert into Changemakers_Combined_Overview (channel, sub_channel, date, timestamp, month, week, impression_by_date, users_by_date, activity_calendar_events, event_occurence_by_date, event_occurence_by_time, activity_implemented_by, likes_consid_engage_by_date, downloads_by_date, total_engagements, engagement_rate_by_activity_1, engagement_rate_by_activity_2, conversion_listened_watched, listened_watched_full_podcast_episode, video_view_rate, video_completion_rate) \\n    select\\n        \\'Podcast/Vodcast\\' as channel\\n        ,\\'Vimeo\\' as sub_channel\\n        , date \\n        , date as timestamp\\n        , cast(format(date, \\'yyyyMM\\') as int) as month\\n        , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\\n        , loads as impression_by_date\\n        , unique_viewers as users_by_date\\n        , name as activity_calendar_events\\n        , created_time as event_occurence_by_date\\n        , created_time as event_occurence_by_time\\n        , \\'Rishi Padda\\' as activity_implemented_by\\n        , likes as likes_consid_engage_by_date\\n        , plays as downloads_by_date\\n        , plays as total_engagements\\n        , case when loads = 0 or loads is null then 0 else (plays / loads) end as engagement_rate_by_activity_1\\n        , case when unique_viewers = 0 or unique_viewers is null then 0 else (plays / unique_viewers) end as engagement_rate_by_activity_2\\n        , mean_percent as conversion_listened_watched\\n        , finishes as listened_watched_full_podcast_episode\\n        , case when loads = 0 or loads is null then 0 else (plays / loads) end as video_view_rate\\n        , case when plays = 0 or plays is null then 0 else (finishes / plays) end as video_completion_rate\\n    from Raw_Vimeo','drop table if exists Temp_Raw_Vimeo'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          plays,",
						"          loads,",
						"          downloads,",
						"          finishes,",
						"          likes,",
						"          comments,",
						"          uri,",
						"          name,",
						"          created_time,",
						"          sizes,",
						"          unique_viewers,",
						"          mean_percent,",
						"          sum_seconds,",
						"          mean_seconds,",
						"          unique_loads",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Vimeo_GetFiles')]",
				"[concat(variables('factoryId'), '/datasets/Vimeo_AzureSqlTable')]"
			]
		}
	]
}