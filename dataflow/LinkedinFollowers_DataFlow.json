{
	"name": "LinkedinFollowers_DataFlow",
	"properties": {
		"folder": {
			"name": "Linkedin"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "LinkedinContent_GetFiles",
						"type": "DatasetReference"
					},
					"name": "SourceProcessFiles"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "LinkedinContent_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          Date as date 'MM/dd/yyyy',",
				"          {Impressions (organic)} as integer,",
				"          {Impressions (sponsored)} as integer,",
				"          {Impressions (total)} as integer,",
				"          {Unique impressions (organic)} as integer,",
				"          {Clicks (organic)} as integer,",
				"          {Clicks (sponsored)} as integer,",
				"          {Clicks (total)} as integer,",
				"          {Reactions (organic)} as integer,",
				"          {Reactions (sponsored)} as integer,",
				"          {Reactions (total)} as integer,",
				"          {Comments (organic)} as integer,",
				"          {Comments (sponsored)} as integer,",
				"          {Comments (total)} as integer,",
				"          {Reposts (organic)} as integer,",
				"          {Reposts (sponsored)} as integer,",
				"          {Reposts (total)} as integer,",
				"          {Engagement rate (organic)} as double '0',",
				"          {Engagement rate (sponsored)} as double '0',",
				"          {Engagement rate (total)} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceProcessFiles",
				"SourceProcessFiles sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     postSQLs:['delete from Raw_LinkedinContent where \\ndate in (select distinct date from Temp_Raw_LinkedinContent where date is not null)','insert Raw_LinkedinContent\\nselect * from Temp_Raw_LinkedinContent','drop table if exists Temp_Raw_LinkedinContent'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          date = Date,",
				"          impressions_organic = {Impressions (organic)},",
				"          impressions_sponsored = {Impressions (sponsored)},",
				"          impressions_total = {Impressions (total)},",
				"          unique_impressions_organic = {Unique impressions (organic)},",
				"          clicks_organic = {Clicks (organic)},",
				"          clicks_ssponsored = {Clicks (sponsored)},",
				"          clicks_total = {Clicks (total)},",
				"          reactions_organic = {Reactions (organic)},",
				"          reactions_sponsored = {Reactions (sponsored)},",
				"          reactions_total = {Reactions (total)},",
				"          comments_organic = {Comments (organic)},",
				"          comments_sponsored = {Comments (sponsored)},",
				"          comments_total = {Comments (total)},",
				"          reposts_organic = {Reposts (organic)},",
				"          reposts_sponsored = {Reposts (sponsored)},",
				"          reposts_total = {Reposts (total)},",
				"          engagement_rate_organic = {Engagement rate (organic)},",
				"          engagement_rate_sponsored = {Engagement rate (sponsored)},",
				"          engagement_rate_total = {Engagement rate (total)}",
				"     )) ~> sink1"
			]
		}
	}
}