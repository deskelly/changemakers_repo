{
	"name": "YouTube_DataFlow",
	"properties": {
		"folder": {
			"name": "Twitter"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "YouTube_GetFiles",
						"type": "DatasetReference"
					},
					"name": "SourceProcessFiles"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "YouTube_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          Content as string,",
				"          {Video title} as string,",
				"          {Video publish time} as date 'MMM dd, yyyy',",
				"          Views as integer,",
				"          {Watch time (hours)} as float,",
				"          Subscribers as integer,",
				"          Impressions as integer,",
				"          {Impressions click-through rate (%)} as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     purgeFiles: true) ~> SourceProcessFiles",
				"SourceProcessFiles sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     preSQLs:['drop table if exists Raw_YouTube;','CREATE TABLE Raw_YouTube(\\n     content varchar(80) NULL,\\n     video_title varchar(255) NULL,\\n     video_publish_time datetime NULL,\\n     views int NULL,\\n    watch_time_hours decimal(20,10) NULL,\\n    subscribers int NULL,\\n    impressions int NULL,\\n    impressions_click_through_rate decimal(20,10) NULL\\n);','CREATE INDEX vpt_202311291611 ON Raw_YouTube (video_publish_time);'],",
				"     postSQLs:['with raw_ext as (\\nselect \\n    video_title as activity_calendar_events\\n    , video_publish_time as date\\n    , impressions\\n    , case when charindex(\\'JCDecaux UK\\', video_title) > 0 or charindex(\\'JCDecaux OneWorld\\', video_title) > 0 then 1 else 0 end as chk \\nfrom Raw_YouTube\\nwhere content != \\'Total\\'\\nand video_title is not null\\n)\\n, final_table as (\\n    select \\n        activity_calendar_events\\n        , date\\n        , impressions\\n    from raw_ext\\n    where chk = 1\\n)\\n--select * from final_table\\n\\nMERGE INTO Changemakers_Combined_Overview a\\nUSING final_table b\\n    ON a.channel = \\'Podcast/Vodcast\\' \\n    and a.sub_channel = \\'YouTube\\'\\n    and a.date = b.date \\n    and a.activity_calendar_events = b.activity_calendar_events\\nWHEN MATCHED THEN\\n  UPDATE SET \\n        a.impression_by_date = b.impressions\\n        , a.users_by_date = b.impressions\\nWHEN NOT MATCHED THEN\\n  INSERT (channel,sub_channel,content, date,month,month_year,week,day_week,week_type,time_day, impression_by_date, users_by_date, activity_calendar_events, activity_implemented_by)\\n  VALUES (\\n        \\'Podcast/Vodcast\\'\\n        , \\'YouTube\\'\\n        , null\\n        , b.date\\n        , datename(month, b.date)\\n        , concat(datename(month, b.date), \\' \\', year(b.date))\\n        , concat(datename(month, b.date), \\' \\', year(b.date), \\' Week \\', (DATEPART(week, b.date) - DATEPART(week, DATEADD(day, 1, EOMONTH(b.date, -1)))) + 1)\\n        , datename(dw, b.date)\\n        , case when datename(dw, b.date) in (\\'Saturday\\', \\'Sunday\\') then \\'Weekend\\' else \\'Weekday\\' end\\n        , \\'Unspecified\\'\\n        , b.impressions\\n        , b.impressions\\n        , b.activity_calendar_events\\n        , \\'Corp\\'\\n  );'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          content = Content,",
				"          video_title = {Video title},",
				"          video_publish_time = {Video publish time},",
				"          views = Views,",
				"          watch_time_hours = {Watch time (hours)},",
				"          subscribers = Subscribers,",
				"          impressions = Impressions,",
				"          impressions_click_through_rate = {Impressions click-through rate (%)}",
				"     )) ~> sink1"
			]
		}
	}
}