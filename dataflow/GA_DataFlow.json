{
	"name": "GA_DataFlow",
	"properties": {
		"folder": {
			"name": "Vimeo"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Vimeo_GetFiles",
						"type": "DatasetReference"
					},
					"name": "SourceProcessFiles"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Vimeo_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          plays as integer,",
				"          loads as integer,",
				"          downloads as integer,",
				"          finishes as integer,",
				"          likes as integer,",
				"          comments as integer,",
				"          uri as string,",
				"          name as string,",
				"          created_time as string,",
				"          sizes as string,",
				"          unique_viewers as integer,",
				"          mean_percent as integer,",
				"          sum_seconds as integer,",
				"          mean_seconds as integer,",
				"          unique_loads as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     purgeFiles: true) ~> SourceProcessFiles",
				"SourceProcessFiles derive(created_time = toTimestamp(created_time, \"yyyy-MM-dd'T'HH:mm:ss\")) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     postSQLs:['insert into Raw_Vimeo\\n    select \\n        CAST(GETDATE() AS DATE) as date\\n        ,a.plays\\n        ,a.loads\\n        ,a.downloads\\n        ,a.finishes\\n        ,a.likes\\n        ,a.comments\\n        ,a.uri\\n        ,a.name\\n        ,a.created_time\\n        ,a.sizes\\n        ,a.unique_viewers\\n        ,a.mean_percent\\n        ,a.sum_seconds\\n        ,a.mean_seconds\\n        ,a.unique_loads\\n    from Temp_Raw_Vimeo a\\n    left outer join Raw_Vimeo b on a.uri = b.uri\\n    where a.uri is not null \\n    and b.uri is null','with raw_data as (\\n    SELECT \\n        uri\\n        ,sum(plays) as plays\\n        ,sum(loads) as loads\\n        ,sum(downloads) as downloads\\n        ,sum(finishes) as finishes\\n        ,sum(likes) as likes\\n        ,sum(comments) as comments\\n        ,sum(unique_viewers) as unique_viewers\\n        ,sum(mean_percent) as mean_percent\\n        ,sum(sum_seconds) as sum_seconds\\n        ,sum(mean_seconds) as mean_seconds\\n        ,sum(unique_loads) as unique_loads\\n    FROM Raw_Vimeo\\n    group by uri \\n)\\ninsert into Raw_Vimeo\\n    SELECT \\n        CAST(GETDATE() AS DATE) as date\\n        ,case when r.plays is null then t.plays else (t.plays - r.plays) end as plays  \\n        ,case when t.loads is null then t.loads else (t.loads - r.loads) end as loads\\n        ,case when t.downloads is null then t.downloads else (t.downloads - r.downloads) end as downloads\\n        ,case when t.finishes is null then t.finishes else (t.finishes - r.finishes) end as finishes\\n        ,case when t.likes is null then t.likes else (t.likes - r.likes) end as likes\\n        ,case when t.comments is null then t.comments else (t.comments - r.comments) end as comments\\n        ,t.uri\\n        ,t.name\\n        ,t.created_time\\n        ,t.sizes\\n        ,case when t.unique_viewers is null then t.unique_viewers else (t.unique_viewers - r.unique_viewers) end as unique_viewers\\n        ,case when t.mean_percent is null then t.mean_percent else (t.mean_percent - r.mean_percent) end as mean_percent\\n        ,case when t.sum_seconds is null then t.sum_seconds else (t.sum_seconds - r.sum_seconds) end as sum_seconds\\n        ,case when t.mean_seconds is null then t.mean_seconds else (t.mean_seconds - r.mean_seconds) end as mean_seconds\\n        ,case when t.unique_loads is null then t.unique_loads else (t.unique_loads - r.unique_loads) end as unique_loads\\n    FROM Temp_Raw_Vimeo t\\n    inner join raw_data r on t.uri = r.uri\\n    where t.unique_viewers != r.unique_viewers','delete from Changemakers_Combined_Overview where sub_channel = \\'Vimeo\\';','insert into Changemakers_Combined_Overview (channel, sub_channel, date, timestamp, month, week, impression_by_date, users_by_date, activity_calendar_events, event_occurence_by_date, event_occurence_by_time, activity_implemented_by, likes_consid_engage_by_date, downloads_by_date, total_engagements, engagement_rate_by_activity_1, engagement_rate_by_activity_2, conversion_listened_watched, listened_watched_full_podcast_episode, video_view_rate, video_completion_rate) \\n    select\\n        \\'Podcast/Vodcast\\' as channel\\n        ,\\'Vimeo\\' as sub_channel\\n        , date \\n        , date as timestamp\\n        , cast(format(date, \\'yyyyMM\\') as int) as month\\n        , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\\n        , loads as impression_by_date\\n        , unique_viewers as users_by_date\\n        , name as activity_calendar_events\\n        , created_time as event_occurence_by_date\\n        , created_time as event_occurence_by_time\\n        , \\'Rishi Padda\\' as activity_implemented_by\\n        , likes as likes_consid_engage_by_date\\n        , plays as downloads_by_date\\n        , plays as total_engagements\\n        , case when loads = 0 or loads is null then 0 else (plays / loads) end as engagement_rate_by_activity_1\\n        , case when unique_viewers = 0 or unique_viewers is null then 0 else (plays / unique_viewers) end as engagement_rate_by_activity_2\\n        , mean_percent as conversion_listened_watched\\n        , finishes as listened_watched_full_podcast_episode\\n        , case when loads = 0 or loads is null then 0 else (plays / loads) end as video_view_rate\\n        , case when plays = 0 or plays is null then 0 else (finishes / plays) end as video_completion_rate\\n    from Raw_Vimeo','drop table if exists Temp_Raw_Vimeo'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          plays,",
				"          loads,",
				"          downloads,",
				"          finishes,",
				"          likes,",
				"          comments,",
				"          uri,",
				"          name,",
				"          created_time,",
				"          sizes,",
				"          unique_viewers,",
				"          mean_percent,",
				"          sum_seconds,",
				"          mean_seconds,",
				"          unique_loads",
				"     )) ~> sink1"
			]
		}
	}
}