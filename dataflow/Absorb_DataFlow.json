{
	"name": "Absorb_DataFlow",
	"properties": {
		"folder": {
			"name": "Absorb"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Absorb_GetFiles",
						"type": "DatasetReference"
					},
					"name": "SourceProcessFiles"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Absorb_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          {Last Name} as string,",
				"          {First Name} as string,",
				"          Department as string,",
				"          {Date Completed} as string,",
				"          {Attained Certificate} as string,",
				"          {Certificate Date} as string,",
				"          Status as string,",
				"          Progress as string,",
				"          {Job Title} as string,",
				"          {Time Spent (min)} as string,",
				"          {Date Enrolled} as string,",
				"          {Last Logged In} as string,",
				"          {Email Address} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     purgeFiles: true) ~> SourceProcessFiles",
				"SourceProcessFiles sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     postSQLs:['with final_table as (\\n    select \\n        last_name\\n        , first_name\\n        , department\\n        , try_convert(datetime, date_completed, 103) as date_completed\\n        , attained_certificate\\n        , certificate_date\\n        , status\\n        , cast(progress as decimal(10,4)) as progress\\n        , job_title\\n        , cast(time_spent_min as int) as time_spent_min\\n        , try_convert(datetime, date_enrolled, 103) as date_enrolled\\n        , try_convert(datetime, last_logged_in, 103) as last_logged_in\\n        , email_address\\nfrom Temp_Raw_Absorb\\n)\\nMERGE INTO Raw_Absorb a\\nUSING final_table b\\n    on a.date_enrolled = b.date_enrolled\\n    and a.email_address = b.email_address\\nWHEN MATCHED THEN\\n  UPDATE SET \\n        a.last_name = b.last_name\\n        , a.first_name = b.first_name\\n        , a.department = b.department\\n        , a.date_completed = b.date_completed\\n        , a.attained_certificate = b.attained_certificate\\n        , a.certificate_date = b.certificate_date\\n        , a.status = b.status\\n        , a.progress = b.progress\\n        , a.job_title = b.job_title\\n        , a.time_spent_min = b.time_spent_min\\n        , a.last_logged_in = b.last_logged_in\\nWHEN NOT MATCHED THEN\\n  INSERT (last_name, first_name, department, date_completed, attained_certificate, certificate_date, status, progress, job_title, time_spent_min, date_enrolled, last_logged_in, email_address)\\n  VALUES (\\n        b.last_name\\n        , b.first_name\\n        , b.department\\n        , b.date_completed\\n        , b.attained_certificate\\n        , b.certificate_date\\n        , b.status\\n        , b.progress\\n        , b.job_title\\n        , b.time_spent_min\\n        , b.date_enrolled\\n        , b.last_logged_in\\n        , b.email_address\\n        );','delete from Changemakers_Combined_Overview where sub_channel = \\'Absorb\\'','with run_tot as (\\n    select\\n        job_title\\n        , time_spent_min\\n        , cast(date_enrolled as datetime) as date\\n        , date_enrolled\\n    from Raw_Absorb\\n)\\ninsert into Changemakers_Combined_Overview (channel,sub_channel,content,date,month,month_year,week,day_week,week_type,time_day, impression_by_date, users_by_date, marketer_job_titles_by_date,time_spent_on_site_page_podcast_vodcast)\\n    select\\n        \\'eLearning\\' as \\'channel\\'\\n        ,\\'Absorb\\' as \\'sub_channel\\'\\n        , \\'Changemakers\\' as content\\n        , date\\n        , datename(month, date)\\n        , concat(datename(month, date), \\' \\', year(date))\\n        , concat(datename(month, date), \\' \\', year(date), \\' Week \\', (DATEPART(week, date) - DATEPART(week, DATEADD(day, 1, EOMONTH(date, -1)))) + 1)\\n        , datename(dw, date)\\n        , case when datename(dw, date) in (\\'Saturday\\', \\'Sunday\\') then \\'Weekend\\' else \\'Weekday\\' end\\n        , case \\n            when cast(date as time) between \\'05:00:00\\' and \\'08:59:59\\' then \\'Morning Commute\\' \\n            when cast(date as time) between \\'09:00:00\\' and \\'11:59:59\\' then \\'Mid Morning\\' \\n            when cast(date as time) between \\'12:00:00\\' and \\'15:59:59\\' then \\'Afternoon\\' \\n            when cast(date as time) between \\'16:00:00\\' and \\'18:59:59\\' then \\'Morning Commute\\' \\n            when cast(date as time) between \\'19:00:00\\' and \\'23:59:59\\' then \\'Late Evening\\' \\n            when cast(date as time) between \\'00:00:00\\' and \\'04:59:59\\' then \\'Night\\' \\n          end\\n        , 1 as impression_by_date\\n        , 1 as users_by_date\\n        , case when job_title is not null then job_title else \\'Not Specified\\' end as marketer_job_titles_by_date\\n        , time_spent_min as time_spent_on_site_page_podcast_vodcast\\n    from run_tot\\n    order by date_enrolled','drop table if exists Temp_Raw_Absorb'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          last_name = {Last Name},",
				"          first_name = {First Name},",
				"          department = Department,",
				"          date_completed = {Date Completed},",
				"          attained_certificate = {Attained Certificate},",
				"          certificate_date = {Certificate Date},",
				"          status = Status,",
				"          progress = Progress,",
				"          job_title = {Job Title},",
				"          time_spent_min = {Time Spent (min)},",
				"          date_enrolled = {Date Enrolled},",
				"          last_logged_in = {Last Logged In},",
				"          email_address = {Email Address}",
				"     )) ~> sink1"
			]
		}
	}
}