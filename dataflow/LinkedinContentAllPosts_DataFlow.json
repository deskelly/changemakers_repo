{
	"name": "LinkedinContentAllPosts_DataFlow",
	"properties": {
		"folder": {
			"name": "Linkedin"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "LinkedinContentAllPosts_GetFiles",
						"type": "DatasetReference"
					},
					"name": "SourceProcessFiles"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "LinkedinContentAllPosts_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          {Post title} as string,",
				"          {Post link} as string,",
				"          {Post type} as string,",
				"          {Campaign name} as string,",
				"          {Posted by} as string,",
				"          {Created date} as date 'MM/dd/yyyy',",
				"          {Campaign start date} as date 'MM/dd/yyyy',",
				"          {Campaign end date} as date 'MM/dd/yyyy',",
				"          Audience as string,",
				"          Impressions as integer,",
				"          {Views (Excluding offsite video views)} as integer,",
				"          {Offsite Views} as integer,",
				"          Clicks as integer,",
				"          {Click through rate (CTR)} as double,",
				"          Likes as integer,",
				"          Comments as integer,",
				"          Reposts as integer,",
				"          Follows as integer,",
				"          {Engagement rate} as double,",
				"          {Content Type} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true) ~> SourceProcessFiles",
				"SourceProcessFiles sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     postSQLs:['delete from Temp_Raw_LinkedinContentAllPosts where post_title is null','with exist_check as (\\n  select distinct post_title \\n  from Raw_LinkedinContentAllPosts\\n)\\ninsert into Raw_LinkedinContentAllPosts\\n    select \\n      a.created_date as date\\n      , a.post_title\\n      , a.post_link\\n      , a.post_type\\n      , a.campaign_name\\n      , a.posted_by\\n      , a.created_date\\n      , a.campaign_start_date\\n      , a.campaign_end_date\\n      , a.audience\\n      , a.impressions\\n      , a.views\\n      , a.offsite_views\\n      , a.clicks\\n      , a.click_through_rate\\n      , a.likes\\n      , a.comments\\n      , a.reposts\\n      , a.follows\\n      , a.engagement_rate\\n      , a.content_type\\n    from Temp_Raw_LinkedinContentAllPosts a\\n    left outer join exist_check b on a.post_title = b.post_title \\n    where b.post_title is null','with raw_data as (\\n    select \\n        post_title\\n        ,sum(impressions) as impressions\\n        ,sum(views) as views\\n        ,sum(offsite_views) as offsite_views\\n        ,sum(clicks) as clicks\\n        ,sum(click_through_rate) as click_through_rate\\n        ,sum(likes) as likes\\n        ,sum(comments) as comments\\n        ,sum(reposts) as reposts\\n        ,sum(follows) as follows\\n        ,sum(engagement_rate) as engagement_rate\\n    from Raw_LinkedinContentAllPosts\\n    group by post_title\\n)\\ninsert into Raw_LinkedinContentAllPosts\\n    select\\n      cast(getdate() as date) as date \\n      , trg.post_title\\n      , trg.post_link\\n      , trg.post_type\\n      , trg.campaign_name\\n      , trg.posted_by\\n      , trg.created_date\\n      , trg.campaign_start_date\\n      , trg.campaign_end_date\\n      , trg.audience\\n      , case when rg.impressions is null then trg.impressions else (trg.impressions - rg.impressions) end as impressions\\n      , case when rg.views is null then trg.views else (trg.views - rg.views) end as views\\n      , case when rg.offsite_views is null then trg.offsite_views else (trg.offsite_views - rg.offsite_views) end as offsite_views\\n      , case when rg.clicks is null then trg.clicks else (trg.clicks - rg.clicks) end as clicks\\n      , case when rg.click_through_rate is null then trg.click_through_rate else (trg.click_through_rate - rg.click_through_rate) end as click_through_rate\\n      , case when rg.likes is null then trg.likes else (trg.likes - rg.likes) end as likes\\n      , case when rg.comments is null then trg.comments else (trg.comments - rg.comments) end as comments\\n      , case when rg.reposts is null then trg.reposts else (trg.reposts - rg.reposts) end as reposts\\n      , case when rg.follows is null then trg.follows else (trg.follows - rg.follows) end as follows\\n      , case when rg.engagement_rate is null then trg.engagement_rate else (trg.engagement_rate - rg.engagement_rate) end as engagement_rate\\n      , trg.content_type\\n    from Temp_Raw_LinkedinContentAllPosts trg\\n    left outer join raw_data rg\\n    on trg.post_title = rg.post_title\\n    where trg.impressions - rg.impressions > 0','delete from Changemakers_Combined_Overview where sub_channel = \\'Linkedin Organic\\' and activity_calendar_events is not null','insert into Changemakers_Combined_Overview (channel,sub_channel,date,timestamp,month,week,activity_calendar_events,event_occurence_by_date,event_occurence_by_time,activity_implemented_by,conversion_listened_watched,listened_watched_full_podcast_episode)\\nselect\\n    \\'Social Media\\' as \\'channel\\'\\n    ,\\'Linkedin Organic\\' as \\'sub_channel\\'\\n    , date \\n    , date as timestamp\\n    , cast(format(date, \\'yyyyMM\\') as int) as month\\n    , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\\n    , post_title as activity_calendar_events\\n    , created_date as event_occurence_by_date\\n    , case when campaign_start_date is null then created_date end as event_occurence_by_time\\n    , posted_by as activity_implemented_by\\n    , clicks as conversion_listened_watched\\n    , clicks as listened_watched_full_podcast_episode\\nfrom Raw_LinkedinContentAllPosts','drop table if exists Temp_Raw_LinkedinContentAllPosts'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          post_title = {Post title},",
				"          post_link = {Post link},",
				"          post_type = {Post type},",
				"          campaign_name = {Campaign name},",
				"          posted_by = {Posted by},",
				"          created_date = {Created date},",
				"          campaign_start_date = {Campaign start date},",
				"          campaign_end_date = {Campaign end date},",
				"          audience = Audience,",
				"          impressions = Impressions,",
				"          views = {Views (Excluding offsite video views)},",
				"          offsite_views = {Offsite Views},",
				"          clicks = Clicks,",
				"          click_through_rate = {Click through rate (CTR)},",
				"          likes = Likes,",
				"          comments = Comments,",
				"          reposts = Reposts,",
				"          follows = Follows,",
				"          engagement_rate = {Engagement rate},",
				"          content_type = {Content Type}",
				"     )) ~> sink1"
			]
		}
	}
}