{
	"name": "LinkedinContentAllPosts_DataFlow",
	"properties": {
		"folder": {
			"name": "Linkedin"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "LinkedinContentAllPosts_GetFiles",
						"type": "DatasetReference"
					},
					"name": "SourceProcessFiles"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "LinkedinContentAllPosts_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          {Post title} as string,",
				"          {Post link} as string,",
				"          {Post type} as string,",
				"          {Campaign name} as string,",
				"          {Posted by} as string,",
				"          {Created date} as date 'MM/dd/yyyy',",
				"          {Campaign start date} as date 'MM/dd/yyyy',",
				"          {Campaign end date} as date 'MM/dd/yyyy',",
				"          Audience as string,",
				"          Impressions as integer,",
				"          {Views (Excluding offsite video views)} as integer,",
				"          {Offsite Views} as integer,",
				"          Clicks as integer,",
				"          {Click through rate (CTR)} as double,",
				"          Likes as integer,",
				"          Comments as integer,",
				"          Reposts as integer,",
				"          Follows as integer,",
				"          {Engagement rate} as double,",
				"          {Content Type} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceProcessFiles",
				"SourceProcessFiles sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     preSQLs:['insert into Raw_LinkedinContentAllPosts\\n    SELECT \\n      cast(getdate() as date) as date\\n      , tap.post_title\\n      , tap.post_link\\n      , tap.post_type\\n      , tap.campaign_name\\n      , tap.posted_by\\n      , tap.created_date\\n      , tap.campaign_start_date\\n      , tap.campaign_end_date\\n      , tap.audience\\n      , case when ap.impressions is null then tap.impressions else (tap.impressions - ap.impressions) end as impressions\\n      , case when ap.views is null then tap.views else (tap.views - ap.views) end as views\\n      , case when ap.offsite_views is null then tap.offsite_views else (tap.offsite_views - ap.offsite_views) end as offsite_views\\n      , case when ap.clicks is null then tap.clicks else (tap.clicks - ap.clicks) end as clicks\\n      , case when ap.click_through_rate is null then tap.click_through_rate else (tap.click_through_rate - ap.click_through_rate) end as click_through_rate\\n      , case when ap.likes is null then tap.likes else (tap.likes - ap.likes) end as likes\\n      , case when ap.comments is null then tap.comments else (tap.comments - ap.comments) end as comments\\n      , case when ap.reposts is null then tap.reposts else (tap.reposts - ap.reposts) end as reposts\\n      , case when ap.follows is null then tap.follows else (tap.follows - ap.follows) end as follows\\n      , case when ap.engagement_rate is null then tap.engagement_rate else (tap.engagement_rate - ap.engagement_rate) end as engagement_rate\\n      , tap.content_type\\n    from Temp_Raw_LinkedinContentAllPosts tap\\n    left outer join Raw_LinkedinContentAllPosts ap on tap.post_title = ap.post_title \\n    where tap.post_title is not null\\n    and (ap.post_title is null or tap.impressions != ap.impressions)'],",
				"     postSQLs:['drop table if exists Temp_Raw_LinkedinContentAllPosts'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          post_title = {Post title},",
				"          post_link = {Post link},",
				"          post_type = {Post type},",
				"          campaign_name = {Campaign name},",
				"          posted_by = {Posted by},",
				"          created_date = {Created date},",
				"          campaign_start_date = {Campaign start date},",
				"          campaign_end_date = {Campaign end date},",
				"          audience = Audience,",
				"          impressions = Impressions,",
				"          views = {Views (Excluding offsite video views)},",
				"          offsite_views = {Offsite Views},",
				"          clicks = Clicks,",
				"          click_through_rate = {Click through rate (CTR)},",
				"          likes = Likes,",
				"          comments = Comments,",
				"          reposts = Reposts,",
				"          follows = Follows,",
				"          engagement_rate = {Engagement rate},",
				"          content_type = {Content Type}",
				"     )) ~> sink1"
			]
		}
	}
}