{
	"name": "Acast_ListenersPerEpisode",
	"properties": {
		"activities": [
			{
				"name": "Get Metadata1",
				"description": "",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Script2",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ACastListenersPerEpisode_GetFiles",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Metadata1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Metadata1').output.childItems",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Data flow1",
							"type": "ExecuteDataFlow",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "ACastListenersPerEpisode",
									"type": "DataFlowReference"
								},
								"compute": {
									"coreCount": 16,
									"computeType": "General"
								},
								"traceLevel": "Coarse"
							}
						}
					]
				}
			},
			{
				"name": "Script1",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "drop table if exists Temp_Raw_ACastListenersPerEpisode"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Script2",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Script1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "CREATE TABLE Temp_Raw_ACastListenersPerEpisode(\n\tdate date NULL\n\t, listeners int NULL\n\t, episode_name nvarchar(200) NULL\n);"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Script3",
				"type": "Script",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "with final_table as (\n  select\n      a.date\n      , a.listeners\n      , replace(replace(substring(a.episode_name, 2, 128), '%20', ' '), '.csv', '') as episode_name\n  from Temp_Raw_ACastListenersPerEpisode a\n)\n-- select * from final_table\nMERGE INTO Raw_ACastListenersPerEpisode a\nUSING final_table b\n    ON a.date = b.date \n    and a.episode_name = b.episode_name\nWHEN MATCHED THEN\n  UPDATE SET \n        a.listeners  = b.listeners \nWHEN NOT MATCHED THEN\n  INSERT (date, listeners, episode_name)\n  VALUES (\n        b.date\n        , b.listeners\n        , b.episode_name \n        );"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Script4",
				"type": "Script",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Script3",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "with final_table as (\n    select\n        'Podcast/Vodcast' as channel\n        ,'Acast' as sub_channel\n        , date \n        , date as timestamp\n        , cast(format(date, 'yyyyMM') as int) as month\n        , cast(concat(left(date,4),  right(datepart(ww, date) + 100, 2)) as int) as week\n        , listeners as impression_by_date\n        , listeners as users_by_date\n        , episode_name as activity_calendar_events    --using listerners here until more clarity\n        , date as event_occurence_by_date    --using listerners here until more clarity \n        , date as event_occurence_by_time    --using listerners here until more clarity\n        , 'Russell Gower' as activity_implemented_by\n    from Raw_ACastListenersPerEpisode\n)\n\nMERGE INTO Changemakers_Combined_Overview a\nUSING final_table b\n    on a.channel = b.channel\n    and a.sub_channel = b.sub_channel\n    and a.date = b.date\n    and a.activity_calendar_events = b.activity_calendar_events \nWHEN MATCHED THEN\n  UPDATE SET \n        a.impression_by_date = b.impression_by_date\n        , a.users_by_date = b.users_by_date\n        , a.activity_calendar_events = b.activity_calendar_events\n        , a.event_occurence_by_date = b.event_occurence_by_date\n        , a.event_occurence_by_time = b.event_occurence_by_time\n        , a.activity_implemented_by = b.activity_implemented_by\nWHEN NOT MATCHED THEN\n  INSERT (channel, sub_channel, date, timestamp, month, week, impression_by_date, users_by_date, activity_calendar_events, event_occurence_by_date, event_occurence_by_time, activity_implemented_by)\n  VALUES (\n        b.channel\n        , b.sub_channel\n        , b.date \n        , b.timestamp\n        , b.month\n        , b.week\n        , b.impression_by_date\n        , b.users_by_date\n        , b.activity_calendar_events\n        , b.event_occurence_by_date\n        , b.event_occurence_by_time\n        , b.activity_implemented_by\n        );"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Script5",
				"type": "Script",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Script4",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Changemakers",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "drop table if exists Temp_Raw_ACastListenersPerEpisode"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"variables": {
			"episodeName": {
				"type": "String"
			}
		},
		"folder": {
			"name": "ACast"
		},
		"annotations": [],
		"lastPublishTime": "2023-10-23T11:09:52Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}